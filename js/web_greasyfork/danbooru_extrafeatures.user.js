// ==UserScript==
// @name         Danbooru - Extra features pack
// @namespace    http://tampermonkey.net/
// @version      2024-11-21
// @description  try to take over the world!
// @author       mdpakk
// @match        https://danbooru.donmai.us*
// @match        https://danbooru.donmai.us/*
// @match        https://aibooru.online*
// @match        https://aibooru.online/*
// @match        https://safebooru.donmai.us*
// @match        https://safebooru.donmai.us/*
// @match        https://gaybooru.app*
// @match        https://gaybooru.app/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=donmai.us
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    //configuration

    if(localStorage.getItem("mdpk-extrafeatures-settings-hotgarbagepostslink-enable")==null) localStorage.setItem("mdpk-extrafeatures-settings-hotgarbagepostslink-enable",0)
    if(localStorage.getItem("mdpk-extrafeatures-settings-artistsondanboorulink-enable")==null) localStorage.setItem("mdpk-extrafeatures-settings-artistsondanboorulink-enable",1)
    if(localStorage.getItem("mdpk-extrafeatures-settings-userawfilesfortransparentandanimatedposts-enable")==null) localStorage.setItem("mdpk-extrafeatures-settings-userawfilesfortransparentandanimatedposts-enable",0)
    if(localStorage.getItem("mdpk-extrafeatures-settings-userawfilesforallthumbnails-enable")==null) localStorage.setItem("mdpk-extrafeatures-settings-userawfilesforallthumbnails-enable",0)

    var hot_garbage_posts_link_e=localStorage.getItem("mdpk-extrafeatures-settings-hotgarbagepostslink-enable")
    var artists_on_danbooru_link_e=localStorage.getItem("mdpk-extrafeatures-settings-artistsondanboorulink-enable")
    var use_raw_files_for_transparent_and_animated_posts=localStorage.getItem("mdpk-extrafeatures-settings-userawfilesfortransparentandanimatedposts-enable")
    var use_raw_files_for_all_thumbnails=localStorage.getItem("mdpk-extrafeatures-settings-userawfilesforallthumbnails-enable")

    //variables
    //todo: fetch total feedbacks based on sock data

    var search_queries_for_tag_gardening=
        {
            domain:"danbooru.donmai.us",
            list:[
                {
                    name :"Nah i’d win untagged english_text",
                    query:"status:any nah_i'd_win_(meme) -english_text -translation_request -has:notes comic"
                },
                {
                    name :"Improperly tagged or unparented variant set posts",
                    query:"variant_set -is:child -is:parent -pool:any"
                }
            ]
        }

    var danbooru_sock_account_db=[
        {
            domain:"danbooru.donmai.us",
            sock_db:[
                // ids and usernames should be synchronized
                // sort the ids from lowest to highest first before syncing usernames
                {
                    ids:[460797, 509825, 525419, 570925],
                    usernames:["dXNlcl80NjA3OTc=","dXNlcl81MDk4MjU=","dXNlcl81MjU0MTk=","UHJvdmVuY2U="],
                },
                {
                    ids:[893647, 1016591, 1178159, 1179856],
                    usernames:["dXNlcl84OTM2NDc=","dXNlcl8xMDE2NTkx","dXNlcl8xMTc4MTU5","dXNlcl8xMTc5ODU2"],
                },
                {
                    ids:[998846, 1147878, 1153426, 1160833, 1211591],
                    usernames:["dXNlcl85OTg4NDY=","dXNlcl8xMTQ3ODc4","dXNlcl8xMTUzNDI2","dXNlcl8xMTYwODMz","WW9veW9vSnVuZ2h5dWtv"],
                },
                {
                    ids:[1247114, 1229293, 1227791, 1223490, 1223087, 1223047, 1218007, 1216726, 1216405, 1215924, 1214702, 1213805, 1213411, 1213011, 1212264, 1210567, 1209891, 1209813, 1209783, 1209763, 1209736, 1209676, 1209460, 1208888, 1208804, 1207561, 1207546, 1207544, 1207542, 1207539, 1207501, 1206277, 1204729, 1203320, 1203345, 1203321, 1203316, 1203010, 1202324, 1202229, 1201772, 1200966, 1200695, 1200696, 1200385, 1200371, 1200266, 1200119, 1200088, 1200086, 1200085, 1200071, 1199996, 1199714, 1199624, 1199589, 1198132, 1198103, 1197632, 1197385, 1197258, 1196815, 1196458, 1196417, 1196032, 1195620, 1195377, 1195327, 1195298, 1195201, 1194930, 1194537, 1194138, 1193312, 1192121, 1191771, 1190892, 1190592, 1190167, 1189782, 1188760, 1188440, 1187590, 1186839, 1186589, 1185270, 1185236, 1185182, 1184784, 1183349, 1181749, 1180509, 1179723, 1178992, 1178934, 1177334, 1176946, 1176590, 1176274, 1174594, 1174178, 1173336, 1171481, 1170022, 1169731, 1168905, 1166541, 1165917, 1165905, 1165897, 1165789, 1164912, 1162099, 1161752, 1159838, 1159532, 1159462, 1158856, 1158828, 1157438, 1157332, 1156929, 1156870, 1156698, 1154042, 1153753, 1153231, 1151288, 1150988, 1148668, 1148323, 1145624, 1144675, 1143194, 1142048, 1139408, 1138677, 1131977, 1131953, 1131597, 1125897, 1122998, 1122573, 1121843, 1119569, 1114985, 1114630, 1112372, 1109151, 1108891, 1107774, 1107111, 1105237, 1104888, 1104815, 1102541, 1099103, 1098750, 1096953, 1094525, 1094238, 1086381, 1084931, 1084930, 1084920, 1084917, 1084912, 1084524, 1080801, 1080547, 1078593, 1078592, 1077813, 1077505, 1076549, 1073196, 1072089, 1070635, 1068283, 1065991, 1064138, 1059687, 1059586, 1058884, 1052219, 1051559, 1051479, 1042222, 1041615, 1040447, 1033851, 1033449, 1031151, 1030565, 1027839, 1027074, 1019738, 1020411, 1018621, 1017490, 1011247, 1011597, 1007283, 1006056, 1005567, 1005558, 1005282, 1001778, 998535, 998138, 997888, 997438, 997432, 997429, 997417, 997411, 995893, 995824, 992051, 989636, 986728, 985473, 985037, 983389, 981911, 981726, 980439, 979610, 979559, 973693, 972556, 971085, 971015, 969920, 969201, 968492, 968075, 967678, 967367, 966963, 966226, 963952, 962737, 962425, 962396, 960472, 960468, 959041, 954001, 952987, 948583, 948133, 946954, 946732, 945429, 945149, 945072, 945144, 942691, 942347, 942341, 941483, 941482, 939646, 939059, 938120, 937236, 937226, 936388, 936012, 935787, 935528, 932650, 932141, 932140, 932117, 932130, 932139, 931828, 926617, 926331, 926270, 924616, 923678, 923418, 923122, 923078, 922510, 922475, 921542, 921537, 921523, 921225, 920940, 920909, 920876, 920638, 920625, 918765, 917190, 917152, 917145, 916911, 916904, 911341, 909798, 908704, 908371, 908178, 908209, 908224, 904528, 903144, 902903, 902897, 902880, 902876, 902857, 902294, 902248, 902234, 902231, 902046, 901940, 901743, 901429, 901703, 901558, 901411, 901410, 901405, 901151, 901135, 901127, 900971, 900350, 900321, 900122, 898577, 898204, 898368, 897923, 895588, 895555, 895497, 894423, 895342, 893204, 893176, 892484, 892006, 890576, 887903, 887720, 887726, 887260, 884699, 884687, 884537, 883790, 866205, 866204, 866191, 866185, 862029, 861996, 859697, 859240, 857103, 857090, 855755, 855310, 854954, 854723, 853033, 851429, 852433, 852446, 852440,889566, 889564, 879995, 889560, 860325, 860315, 860312, 860299, 853335, 853244, 853232, 852426, 851519, 832068, 833408, 831854, 831846, 831769, 831691, 831686, 831684, 804931,810100],
                    usernames:['c2V4dHVzcG9tcGVpdXM=', 'Y2hpcnVydWc=', 'YnVubmlhcGE=', 'cGlua3VraXJieQ==', 'aGFyYW5nMDgxNjkxNDE=', 'aXRhbG9icm90aGVycw==', 'emVua3Vu', 'Ym9ubmllX3l1bg==', 'bWluaV9u', 'ZGF2aWRzb25nMTc=', 'YmV4ZXJjdWJl', 'UGVyZmVjdFR1YmUxMg==', 'c3VucHJvamVjdA==', 'YmlnYmlnd29ybGQ=', 'cGlhbnRhcG5n', 'a2Fma2Fib29t', 'cGVuZ193ZW5n', 'dXRzNzVl', 'cnk4aXk=', 'QmVuX0JpZ2dlcg==', 'Wmh1WXVhbg==', 'a3Vyb3JvMjAwMA==', 'bGludGVydGVh', 'a295dXV1dXV1dXV1dXU=', 'N2U1Z2pv', 'd2VydDRleTY=', 'Y2hlcnJ1dHVz', 'dGFyZ2V0c3RvcmU=', 'Y2hlcnJ5c2FrdXJhMw==', 'Y2hlcnJ5Ymxvc3NvbWZlc3RpdmFs', 'U2h1Z2Fv', 'bWFqaW5reg==', 'Tm90aWNlTmU=', 'TWludEJsdXNo', 'cGx1Y2t5c2F4b3Bob25l', 'R2xpdHRlcnNvZk1vb25saWdodA==', 'RG9udFN0b3BNZU5vdw==', 'V2F0ZXJtZWxvblN1Z2Fy', 'aWVuZWtv', 'Z25tc2tlaQ==', 'Q2FudFRvdWNoVGhpcw==', 'S3J5dWdlcg==', 'S29sZWRh', 'QmVsb2JvZw==', 'bWlzc2lvbmNvbXBsZXRl', 'RG9udFdhaXRVcA==', 'NDA0ZXJyb3I=', 'bmluZWxpdmVzc3Q3', 'c2NlbmljYmFiZTE1', 'c2NlbmljYmFiZTE=', 'c2NlbmljYmFiZQ==', 'c2FhZGl5YTc0', 'bmVidWxhbmVjdGFy', 'aDVnZzk1', 'Ymxvb2R5aGFsbw==', 'ZGF0ZV9tZQ==', 'Z2xhbWdvZGRlc3Nz', 'THV4ZUJlYXV0eQ==', 'bGVtaXg=', 'Mm1r', 'c2hpaG9yYW4=', 'OGJ4bw==', 'b3V0ZG9vcnN5', 'THV4dXJ5UmVhbHRvcg==', 'MnNvbGlkZGs=', 'emVubW9vZA==', 'cGlua3BhZ2U=', 'YmVhdXR5c3R5bGlzaA==', 'Z2xpdHRlcmdpcmw=', 'Y3VwY2FrZWdpcmw=', 'cGlua2RhaXN5', 'ZGd1c3RhcnNoYWRvdw==', 'bG92ZXMyY2hpbGw=', 'bGl2bG92ZWx5', 'bGlrZWx5cmVndWxhcg==', 'bWFjaG9zYWls', 'RWNvRnJpZW5kbHlGYXNoaW9uaXN0YQ==', 'RmFzaGlvbkZpbmRlcg==', 'cGVhbnV0amFt', 'ZnJlZXppbmdzbGlw', 'TmFtZUJleW9uZA==', 'dGU3MHI1', 'V2FsbGFydQ==', 'Y2h4cnJ5', 'RXBpY0NvYXN0ZXI=', 'c3ByaWluZ3RpaW1lcw==', 'd2luZ19jaHVu', 'a3Jva290b3BpYQ==', 'b2xkY29i', 'WmFmYXJpYQ==', 'cG9sYXJpczEwMQ==', 'RHJhZ29uc3B5cmU=', 'bWFybGV5Ym9uZQ==', 'TW9ucXVpc3Rh', 'a2xvdmVzMmNoaWxs', 'cGlyYXRlMTAx', 'YmFja3lhcmRpZ2Fucw==', 'eW91cmZhdm9yaXRlbmVpZ2hib3I=', 'ZWdnc2hlbg==', 'b3cxMjcxNA==', 'c2ltc2ltaGVhMA==', 'dWVuaW8=', 'WU1DQQ==', 'Y2hpbmFob3VzZQ==', 'TGFtYXplUA==', 'cGFuZXJh', 'THV4dXJ5TGVhdGhlcnM=', 'VGhlUmVhbE5hbWU=', 'bWl5dXRoZW9iamVjdHM3MQ==', 'QXJ0aXN0T2ZMaWdodA==', 'TmFtZVNlY3VyaXR5', 'c3RhcmJ1Y2tz', 'YWxjaGVteXdvcmtz', 'TW9kZXJuTWFya2V0ZXI=', 'bG92ZXNEYW5jZQ==', 'TWFrZWdpcmxz', 'ZnJlZXJlbGF4aW5nbW92aWVz', 'Qmxpc3NmdWxCbGVuZA==', 'TGl6RG9lc0Jpeg==', 'Sm9HbG93cw==', 'TllDQm91dGlxdWVTdHlsZQ==', 'QmFnZGFuYQ==', 'c2x1ZGxjbGFzcw==', 'c2xtZmUwMTcx', 'bWljcm9zb2Z0NDM2NTNiZXN0', 'U2hpZ2VtaWNoaQ==', 'S2FzdW1pemF3YQ==', 'TmFva2lfZGFrZQ==', 'bnlhaGFsbG8x', 'TnlhaGFsbG8=', 'QUxhQ2FydGE=', 'UmFxaW8=', 'R25vc2lh', 'SmltbW9yaQ==', 'c3dlZXRpZXBpZQ==', 'V29ybGRvZkxvbmdwbGF5cw==', 'TWFjZG9uYWxkc01hcmtldA==', 'TGl6YWxseQ==', 'QXJpc3VBcmNoaXZl', 'cGlua2xvdmVy', 'U2V4UGlzdG9sc0Zhbg==', 'aWNlZF90ZWE=', 'R29hbmltYXRl', 'YW5nZWxzbm93Zmxha2Vz', 'VGh1bmRlclBhbnplcg==', 'TXIuRHVi', 'c3VkYWtv', 'TURlbHV4ZWZpc2g=', 'TWFyaW9mYW45OA==', 'RUFUU0VHQQ==', 'SjRERQ==', 'Smltb29yaQ==', 'TWFraXNlYQ==', 'Q2hlTEE3Nw==', 'bWlzeXVuZQ==', 'd2F2ZXNvbmJlYXV0aWZ1bA==', 'YWRydXNkb3NzYWw=', 'Y3lhbmNsb3NlbHk=', 'TWlsa3l3YXl3aXNoZXM=', 'M2RzZWFzb24=', 'YmVhdXRpZnVsZm9vbA==', 'Ymx1ZV9lcGhlbWVyaXM=', 'amFhdA==', 'bGlmZV9oYWNrZXI=', 'cmV5OTg1NmtsZ2N1ZHNoM3Q1aW0wYmg0', 'SW1ub3NvY2twdXBwZXRpbW5ldw==', 'd29ya19vZl9ob2xseQ==', 'c3luZXN0aGVzaWEzNHI=', 'R2VsYXRvQmVhY2g=', 'YmFya2xvY2Fs', 'ZmFpdGhmdWxwZXJzb24=', 'Z3Jvd2xpbmdtdXNzbGVz', 'bGlvbnBlbnNpb24=', 'c2FtYW1vaGFtZWRk', 'bWZlc2w=', 'Y29yYWxfc291bA==', 'c2VsaS1jaGFu', 'c3dpbmdyb29m', 'S2lkc0ZpbmdlckZhbWlseVNvbmdz', 'd2FsdHlmaWVyY2U=', 'UGFydHlfc2l6ZQ==', 'cXVlZW5fb2Zfa2luZ3M=', 'cGVwcGVycGVhY2g=', 'aGVhcnRraWxsZXI=', 'SElSRUQ=', 'ZnJlZXJlbGF4aW5n', 'bWZlc2wzNTkw', 'YW5nZWxpY2hlYXJ0', 'd2l0Y2hnaXJs', 'YnVubnlwYXNzaW9u', 'bWljcm9zb2Z0NDM2NTM5', 'RHJfU3VuZmxvd2Vy', 'ZWFzeXJvc2U=', 'cWl4aWE2Ng==', 'U3VwZXJBZHZhbmNl', 'RGF2aWQxMTI=', 'c3Bpbml4c3Rlcg==', 'S2VuNTUz', 'bmV2YXIta3Vu', 'TUlTT0FSVA==', 'R2VyYXRvd24=', 'YmFmZmxlZ2Fi', 'ZGV2aWFnYXBh', 'cGFtYm91cmE=', 'R2FtZXBsYXlVcGxvYWRlZA==', 'Z29vZ29vODg4', 'QmdoNzM=', 'YmFkX2NhcHRhaW4=', 'emluZ19vdXQzOQ==', 'bWFnbmV0aWN3b21hbg==', 'c2h5ZG9sbA==', 'bWVub3RidWc=', 'YWtpdG9fc2Ns', 'dG9vdGhub3J0aA==', 'Y291Y2hraW5n', 'SHVtZHJ1bQ==', 'emVpcGh5cg==', 'c2hpbmVsaW1lcw==', 'ZXJpY19mZQ==', 'dW5pdmVyeHNl', 'bGVzc29ucG93ZXI=', 'V2lua2NoaQ==', 'Uml2ZXJ2aXhlbg==', 'bGVhbmxhY2U=', 'd2luZWFuZHdoaW5l', 'c3F1aXJyZWxfbnV0cw==', 'U3VyaW8=', 'bW9hbndhZ2dpc2g=', 'Y2hvdWdodmVzdA==', 'TkNaZXVz', 'aGF6emxlX2RhenpsZQ==', 'c3ByaW5naG91c2U=', 'ZmxhbWUyZnJvc3Q=', 'b3ZlcmRvb3I=', 'YW1sZXJpc2E=', 'YnJvdGhlbGFkb3Jlcg==', 'YmVsb3ZlZC1hbmdsZQ==', 'cGluZXhhcHBsZQ==', 'Rk0yLTM=', 'cGllX3N3ZWV0bmVzcw==', 'cGFja2F0dGFjazA0MDgy', 'YnV0dGVyZmx5a2lzcw==', 'aWFtd2VsbGFuZGdvb2Q=', 'U3RhcnJ5RXllcw==', 'ZGFpbHlfcHVuY2g=', 'ZGVsYXBzMzQ2NQ==', 'Q2hpYml0ZXJhc3VjaGFu', 'bW9ub2Nocm9tZWJsdWVza3k=', 'Ym9ybi1jb25mdXNlZA==', 'UzNSTERK', 'V2lpRml0', 'SnVpY3lGcml1dA==', 'U2NyYXRjaEtpdGNoZW4=', 'R2FtZXN0b3A=', 'cnR5YnJ5cjY=', 'c3Bhcmtzb2Zjb3VyYWdl', 'c3Bhcmtzb2Zob3BlYnJpdGlzaA==', 'ZWlyaWdyaXl2', 'a2x1dHY0aWdn', 'bWl4bWlsa3NoYWtlcw==', 'Y3JhenlfYW55b25l', 'd2lraS50b2NrZG9t', 'NXl2NDY0NjQ=', 'R2lmamxnZGd4', 'R3h1Z2d4', 'Qmx1ZUFuZ2VsOTI=', 'SWdja2d4a2c=', 'U2hpbmlnYW1pU2Fvcmk=', 'SWdjaWg0NQ==', 'VGNvZmNnajM0NQ==', 'VGF0YUZhbg==', 'cnVrYXlleA==', 'SWNoaWdvRmFu', 'c29waGlhM3VxNDQ4NTQ0', 'V2hhdEdvZXNJblNwYWNl', 'Y3JhenljYXJz', 'U2F2aW5nZmFjZQ==', 'dGFpbGxwc3ljaG8=', 'TWVnYW1pY3JvZ2FtZXM=', 'SXJvbnN0b21hY2g=', 'VWxmc2hzZmtndXNsaGZsc2dqbHN1b3M=', 'V2FyaW93b3JsZA==', 'YXJrbmd0aHNmYW4=', 'QU5pRkxBSXM=', 'bGlnaHRuaW5nYmVlcmxvY2tjYXQ=', 'Z29vZGthcm1h', 'QmFkS2FybWE=', 'RnJvbnRsaW5lUGxhbmU=', 'Ym91bmNlYmFjaw==', 'aGFpc2xleTVob3dhcmQ=', 'Y3JpbXNvbmVycm9y', 'Tm93aW1tYWQ=', 'SGFwcHlmYW4=', 'cmVhZGluZ3Bybw==', 'U2VhdHVydGxlZmlzaGxvYnN0ZXI=', 'UmV0aXJlbWVudGlzYmVzdA==', 'V2FsbWFydHNob3BwZXI=', 'QkhDZ3Uzc3Q=', 'SW5kaWFuYUJlYWNo', 'NTM4NjUzaHhnamR0', 'VXRzcGZ1bHNnaXN6eWRkaXJldHV1eWY=', 'RGlhbW9uZGJlc3Q=', 'YmFieWJ1dHRlcmZseWlzc2FmZQ==', 'QmVhclRhbGU=', 'dHVydGxlbWVjaGEtdWx0cmE=', 'UnlsZWlnaHVkamY=', 'S2FuZ2Fyb296b28=', 'Q296eWJodHRvbg==', 'bXl1bml2ZXJzZWJ0cw==', 'dG9tYXRvZm9jdXNlZA==', 'S2lzc19teV9heGU=', 'QmVlcC0wS2luZ2RvbUJhdHRsZQ==', 'd2Vsa29tYmlqSEVNQQ==', 'VFY1TW9uZGU=', 'c3RlaWdlbmJlcmdlcg==', 'TWFkYW1lTWFkZW1vaXNlbGxl', 'Ym9uam91cnBhcmlz', 'YmlnYnJlYWs=', 'Q29hc3RieWNvYXN0', 'Y2FsaWZvcm5pYWd1cmxz', 'aGl0NDc=', 'aGlkZV9ieV9mZWVsaW5ncw==', 'dGhlc2VhZmlsZXM=', 'WW9ybWFz', 'VXJzcHJ1bmdsaWNocmVpbg==', 'R3V0ZW5UYWdEZXV0Y2hsYW5k', 'cmFpbmJvd19ibG9vbXM=', 'cGVhY2hfYm95', 'YXNobHluNDV5NDY=', 'cHVkZGluZzQ1Ng==', 'YWluc2xleTV2NjQ1', 'cGVhY2hfbWlsaw==', 'VG9tX1BoYW4=', 'U3Bhd255', 'QmVlcC0wX0tpbmdkb21fQmF0dGxl', 'QmVlcC0w', 'QmVlcDA=', 'S2luZ2RvbWJhdHRsZWZhbg==', 'UGluYUFzYWhpbmE=', 'U2F5YVlha3VzaGk=', 'R0FSTmlERUxpQQ==', 'bW91c2VnaXJs', 'N2FubmV0dGU5OTdpc2RlYWQ=', 'aW1ub3Rhc3BhbWFjY291bnQ=', 'TGF2ZW5hYmVzdA==', 'TmlnaHRjb3JlRmFu', 'd2hhdGh1cnRzdGhlbW9zdA==', 'dGFmZmV0YQ==', 'YnVuZGxlX29mX2xvdmVfc29saWQ=', 'RXZlcmdsb3c=', 'aW1maW5l', 'bWFybmllYmVzdGdpcmw=', 'QmFieXN0ZXBz', 'dGhlX3NwYXJ0YW4=', 'QmFieWtpbnM=', 'aG9uZXlfcG90', 'RWxmZW5fTGllZA==', 'SV9DaGVhdGVkX015c2VsZg==', 'Y2FuZHlfY2FuZQ==', 'TWFyaW9TdHJpa2Vycw==', 'c21odW50', 'c2FtaHVudA==', 'YWx3YXlzYXVnc3Q=', 'aGViZXJ0ZGVhc2ls', 'bWlsa3lfd2F5YmVzdA==', 'bWlsa3l3YXlz', 'cmFpbmJvd2RyZXNzdXA=', 'bm9fbmFtZTE=', 'cmFyZV9yaXBz', 'cmFiYmlkeW9zaGk=', 'ZW5kbGVzc2x5eXlfZm9ycmV2ZXI=', 'ZmFpcnlfcHJpbmNlc3Nfa3Jpc3R5', 'cmFpbmJvd19kb2xs', 'YWVyb2xpdGU=', 'Y2FsaXJvc2UyMzQ=', 'YWJyYWhhbTM0', 'YW1iZXJsZWlnaDQ1eTU=', 'c3VwZXJtYWduaWZpY2VudGV4dHJlbWU=', 'T3JhNDU0','N2FubmV0dGU5OTc=']
                },
                {
                    ids:[1247114, 1229293, 1227791, 1223490, 1223087, 1223047, 1218007, 1216726, 1216405, 1215924, 1214702, 1213805, 1213411, 1213011, 1212264, 1210567, 1209891, 1209813, 1209783, 1209763, 1209736, 1209676, 1209460, 1208888, 1208804, 1207561, 1207546, 1207544, 1207542, 1207539, 1207501, 1206277, 1204729, 1203320, 1203345, 1203321, 1203316, 1203010, 1202324, 1202229, 1201772, 1200966, 1200695, 1200696, 1200385, 1200371, 1200266, 1200119, 1200088, 1200086, 1200085, 1200071, 1199996, 1199714, 1199624, 1199589, 1198132, 1198103, 1197632, 1197385, 1197258, 1196815, 1196458, 1196417, 1196032, 1195620, 1195377, 1195327, 1195298, 1195201, 1194930, 1194537, 1194138, 1193312, 1192121, 1191771, 1190892, 1190592, 1190167, 1189782, 1188760, 1188440, 1187590, 1186839, 1186589, 1185270, 1185236, 1185182, 1184784, 1183349, 1181749, 1180509, 1179723, 1178992, 1178934, 1177334, 1176946, 1176590, 1176274, 1174594, 1174178, 1173336, 1171481, 1170022, 1169731, 1168905, 1166541, 1165917, 1165905, 1165897, 1165789, 1164912, 1162099, 1161752, 1159838, 1159532, 1159462, 1158856, 1158828, 1157438, 1157332, 1156929, 1156870, 1156698, 1154042, 1153753, 1153231, 1151288, 1150988, 1148668, 1148323, 1145624, 1144675, 1143194, 1142048, 1139408, 1138677, 1131977, 1131953, 1131597, 1125897, 1122998, 1122573, 1121843, 1119569, 1114985, 1114630, 1112372, 1109151, 1108891, 1107774, 1107111, 1105237, 1104888, 1104815, 1102541, 1099103, 1098750, 1096953, 1094525, 1094238, 1086381, 1084931, 1084930, 1084920, 1084917, 1084912, 1084524, 1080801, 1080547, 1078593, 1078592, 1077813, 1077505, 1076549, 1073196, 1072089, 1070635, 1068283, 1065991, 1064138, 1059687, 1059586, 1058884, 1052219, 1051559, 1051479, 1042222, 1041615, 1040447, 1033851, 1033449, 1031151, 1030565, 1027839, 1027074, 1019738, 1020411, 1018621, 1017490, 1011247, 1011597, 1007283, 1006056, 1005567, 1005558, 1005282, 1001778, 998535, 998138, 997888, 997438, 997432, 997429, 997417, 997411, 995893, 995824, 992051, 989636, 986728, 985473, 985037, 983389, 981911, 981726, 980439, 979610, 979559, 973693, 972556, 971085, 971015, 969920, 969201, 968492, 968075, 967678, 967367, 966963, 966226, 963952, 962737, 962425, 962396, 960472, 960468, 959041, 954001, 952987, 948583, 948133, 946954, 946732, 945429, 945149, 945072, 945144, 942691, 942347, 942341, 941483, 941482, 939646, 939059, 938120, 937236, 937226, 936388, 936012, 935787, 935528, 932650, 932141, 932140, 932117, 932130, 932139, 931828, 926617, 926331, 926270, 924616, 923678, 923418, 923122, 923078, 922510, 922475, 921542, 921537, 921523, 921225, 920940, 920909, 920876, 920638, 920625, 918765, 917190, 917152, 917145, 916911, 916904, 911341, 909798, 908704, 908371, 908178, 908209, 908224, 904528, 903144, 902903, 902897, 902880, 902876, 902857, 902294, 902248, 902234, 902231, 902046, 901940, 901743, 901429, 901703, 901558, 901411, 901410, 901405, 901151, 901135, 901127, 900971, 900350, 900321, 900122, 898577, 898204, 898368, 897923, 895588, 895555, 895497, 894423, 895342, 893204, 893176, 892484, 892006, 890576, 887903, 887720, 887726, 887260, 884699, 884687, 884537, 883790, 866205, 866204, 866191, 866185, 862029, 861996, 859697, 859240, 857103, 857090, 855755, 855310, 854954, 854723, 853033, 851429, 852433, 852446, 852440,889566, 889564, 879995, 889560, 860325, 860315, 860312, 860299, 853335, 853244, 853232, 852426, 851519, 832068, 833408, 831854, 831846, 831769, 831691, 831686, 831684, 804931,810100],
                    usernames:['c2V4dHVzcG9tcGVpdXM=', 'Y2hpcnVydWc=', 'YnVubmlhcGE=', 'cGlua3VraXJieQ==', 'aGFyYW5nMDgxNjkxNDE=', 'aXRhbG9icm90aGVycw==', 'emVua3Vu', 'Ym9ubmllX3l1bg==', 'bWluaV9u', 'ZGF2aWRzb25nMTc=', 'YmV4ZXJjdWJl', 'UGVyZmVjdFR1YmUxMg==', 'c3VucHJvamVjdA==', 'YmlnYmlnd29ybGQ=', 'cGlhbnRhcG5n', 'a2Fma2Fib29t', 'cGVuZ193ZW5n', 'dXRzNzVl', 'cnk4aXk=', 'QmVuX0JpZ2dlcg==', 'Wmh1WXVhbg==', 'a3Vyb3JvMjAwMA==', 'bGludGVydGVh', 'a295dXV1dXV1dXV1dXU=', 'N2U1Z2pv', 'd2VydDRleTY=', 'Y2hlcnJ1dHVz', 'dGFyZ2V0c3RvcmU=', 'Y2hlcnJ5c2FrdXJhMw==', 'Y2hlcnJ5Ymxvc3NvbWZlc3RpdmFs', 'U2h1Z2Fv', 'bWFqaW5reg==', 'Tm90aWNlTmU=', 'TWludEJsdXNo', 'cGx1Y2t5c2F4b3Bob25l', 'R2xpdHRlcnNvZk1vb25saWdodA==', 'RG9udFN0b3BNZU5vdw==', 'V2F0ZXJtZWxvblN1Z2Fy', 'aWVuZWtv', 'Z25tc2tlaQ==', 'Q2FudFRvdWNoVGhpcw==', 'S3J5dWdlcg==', 'S29sZWRh', 'QmVsb2JvZw==', 'bWlzc2lvbmNvbXBsZXRl', 'RG9udFdhaXRVcA==', 'NDA0ZXJyb3I=', 'bmluZWxpdmVzc3Q3', 'c2NlbmljYmFiZTE1', 'c2NlbmljYmFiZTE=', 'c2NlbmljYmFiZQ==', 'c2FhZGl5YTc0', 'bmVidWxhbmVjdGFy', 'aDVnZzk1', 'Ymxvb2R5aGFsbw==', 'ZGF0ZV9tZQ==', 'Z2xhbWdvZGRlc3Nz', 'THV4ZUJlYXV0eQ==', 'bGVtaXg=', 'Mm1r', 'c2hpaG9yYW4=', 'OGJ4bw==', 'b3V0ZG9vcnN5', 'THV4dXJ5UmVhbHRvcg==', 'MnNvbGlkZGs=', 'emVubW9vZA==', 'cGlua3BhZ2U=', 'YmVhdXR5c3R5bGlzaA==', 'Z2xpdHRlcmdpcmw=', 'Y3VwY2FrZWdpcmw=', 'cGlua2RhaXN5', 'ZGd1c3RhcnNoYWRvdw==', 'bG92ZXMyY2hpbGw=', 'bGl2bG92ZWx5', 'bGlrZWx5cmVndWxhcg==', 'bWFjaG9zYWls', 'RWNvRnJpZW5kbHlGYXNoaW9uaXN0YQ==', 'RmFzaGlvbkZpbmRlcg==', 'cGVhbnV0amFt', 'ZnJlZXppbmdzbGlw', 'TmFtZUJleW9uZA==', 'dGU3MHI1', 'V2FsbGFydQ==', 'Y2h4cnJ5', 'RXBpY0NvYXN0ZXI=', 'c3ByaWluZ3RpaW1lcw==', 'd2luZ19jaHVu', 'a3Jva290b3BpYQ==', 'b2xkY29i', 'WmFmYXJpYQ==', 'cG9sYXJpczEwMQ==', 'RHJhZ29uc3B5cmU=', 'bWFybGV5Ym9uZQ==', 'TW9ucXVpc3Rh', 'a2xvdmVzMmNoaWxs', 'cGlyYXRlMTAx', 'YmFja3lhcmRpZ2Fucw==', 'eW91cmZhdm9yaXRlbmVpZ2hib3I=', 'ZWdnc2hlbg==', 'b3cxMjcxNA==', 'c2ltc2ltaGVhMA==', 'dWVuaW8=', 'WU1DQQ==', 'Y2hpbmFob3VzZQ==', 'TGFtYXplUA==', 'cGFuZXJh', 'THV4dXJ5TGVhdGhlcnM=', 'VGhlUmVhbE5hbWU=', 'bWl5dXRoZW9iamVjdHM3MQ==', 'QXJ0aXN0T2ZMaWdodA==', 'TmFtZVNlY3VyaXR5', 'c3RhcmJ1Y2tz', 'YWxjaGVteXdvcmtz', 'TW9kZXJuTWFya2V0ZXI=', 'bG92ZXNEYW5jZQ==', 'TWFrZWdpcmxz', 'ZnJlZXJlbGF4aW5nbW92aWVz', 'Qmxpc3NmdWxCbGVuZA==', 'TGl6RG9lc0Jpeg==', 'Sm9HbG93cw==', 'TllDQm91dGlxdWVTdHlsZQ==', 'QmFnZGFuYQ==', 'c2x1ZGxjbGFzcw==', 'c2xtZmUwMTcx', 'bWljcm9zb2Z0NDM2NTNiZXN0', 'U2hpZ2VtaWNoaQ==', 'S2FzdW1pemF3YQ==', 'TmFva2lfZGFrZQ==', 'bnlhaGFsbG8x', 'TnlhaGFsbG8=', 'QUxhQ2FydGE=', 'UmFxaW8=', 'R25vc2lh', 'SmltbW9yaQ==', 'c3dlZXRpZXBpZQ==', 'V29ybGRvZkxvbmdwbGF5cw==', 'TWFjZG9uYWxkc01hcmtldA==', 'TGl6YWxseQ==', 'QXJpc3VBcmNoaXZl', 'cGlua2xvdmVy', 'U2V4UGlzdG9sc0Zhbg==', 'aWNlZF90ZWE=', 'R29hbmltYXRl', 'YW5nZWxzbm93Zmxha2Vz', 'VGh1bmRlclBhbnplcg==', 'TXIuRHVi', 'c3VkYWtv', 'TURlbHV4ZWZpc2g=', 'TWFyaW9mYW45OA==', 'RUFUU0VHQQ==', 'SjRERQ==', 'Smltb29yaQ==', 'TWFraXNlYQ==', 'Q2hlTEE3Nw==', 'bWlzeXVuZQ==', 'd2F2ZXNvbmJlYXV0aWZ1bA==', 'YWRydXNkb3NzYWw=', 'Y3lhbmNsb3NlbHk=', 'TWlsa3l3YXl3aXNoZXM=', 'M2RzZWFzb24=', 'YmVhdXRpZnVsZm9vbA==', 'Ymx1ZV9lcGhlbWVyaXM=', 'amFhdA==', 'bGlmZV9oYWNrZXI=', 'cmV5OTg1NmtsZ2N1ZHNoM3Q1aW0wYmg0', 'SW1ub3NvY2twdXBwZXRpbW5ldw==', 'd29ya19vZl9ob2xseQ==', 'c3luZXN0aGVzaWEzNHI=', 'R2VsYXRvQmVhY2g=', 'YmFya2xvY2Fs', 'ZmFpdGhmdWxwZXJzb24=', 'Z3Jvd2xpbmdtdXNzbGVz', 'bGlvbnBlbnNpb24=', 'c2FtYW1vaGFtZWRk', 'bWZlc2w=', 'Y29yYWxfc291bA==', 'c2VsaS1jaGFu', 'c3dpbmdyb29m', 'S2lkc0ZpbmdlckZhbWlseVNvbmdz', 'd2FsdHlmaWVyY2U=', 'UGFydHlfc2l6ZQ==', 'cXVlZW5fb2Zfa2luZ3M=', 'cGVwcGVycGVhY2g=', 'aGVhcnRraWxsZXI=', 'SElSRUQ=', 'ZnJlZXJlbGF4aW5n', 'bWZlc2wzNTkw', 'YW5nZWxpY2hlYXJ0', 'd2l0Y2hnaXJs', 'YnVubnlwYXNzaW9u', 'bWljcm9zb2Z0NDM2NTM5', 'RHJfU3VuZmxvd2Vy', 'ZWFzeXJvc2U=', 'cWl4aWE2Ng==', 'U3VwZXJBZHZhbmNl', 'RGF2aWQxMTI=', 'c3Bpbml4c3Rlcg==', 'S2VuNTUz', 'bmV2YXIta3Vu', 'TUlTT0FSVA==', 'R2VyYXRvd24=', 'YmFmZmxlZ2Fi', 'ZGV2aWFnYXBh', 'cGFtYm91cmE=', 'R2FtZXBsYXlVcGxvYWRlZA==', 'Z29vZ29vODg4', 'QmdoNzM=', 'YmFkX2NhcHRhaW4=', 'emluZ19vdXQzOQ==', 'bWFnbmV0aWN3b21hbg==', 'c2h5ZG9sbA==', 'bWVub3RidWc=', 'YWtpdG9fc2Ns', 'dG9vdGhub3J0aA==', 'Y291Y2hraW5n', 'SHVtZHJ1bQ==', 'emVpcGh5cg==', 'c2hpbmVsaW1lcw==', 'ZXJpY19mZQ==', 'dW5pdmVyeHNl', 'bGVzc29ucG93ZXI=', 'V2lua2NoaQ==', 'Uml2ZXJ2aXhlbg==', 'bGVhbmxhY2U=', 'd2luZWFuZHdoaW5l', 'c3F1aXJyZWxfbnV0cw==', 'U3VyaW8=', 'bW9hbndhZ2dpc2g=', 'Y2hvdWdodmVzdA==', 'TkNaZXVz', 'aGF6emxlX2RhenpsZQ==', 'c3ByaW5naG91c2U=', 'ZmxhbWUyZnJvc3Q=', 'b3ZlcmRvb3I=', 'YW1sZXJpc2E=', 'YnJvdGhlbGFkb3Jlcg==', 'YmVsb3ZlZC1hbmdsZQ==', 'cGluZXhhcHBsZQ==', 'Rk0yLTM=', 'cGllX3N3ZWV0bmVzcw==', 'cGFja2F0dGFjazA0MDgy', 'YnV0dGVyZmx5a2lzcw==', 'aWFtd2VsbGFuZGdvb2Q=', 'U3RhcnJ5RXllcw==', 'ZGFpbHlfcHVuY2g=', 'ZGVsYXBzMzQ2NQ==', 'Q2hpYml0ZXJhc3VjaGFu', 'bW9ub2Nocm9tZWJsdWVza3k=', 'Ym9ybi1jb25mdXNlZA==', 'UzNSTERK', 'V2lpRml0', 'SnVpY3lGcml1dA==', 'U2NyYXRjaEtpdGNoZW4=', 'R2FtZXN0b3A=', 'cnR5YnJ5cjY=', 'c3Bhcmtzb2Zjb3VyYWdl', 'c3Bhcmtzb2Zob3BlYnJpdGlzaA==', 'ZWlyaWdyaXl2', 'a2x1dHY0aWdn', 'bWl4bWlsa3NoYWtlcw==', 'Y3JhenlfYW55b25l', 'd2lraS50b2NrZG9t', 'NXl2NDY0NjQ=', 'R2lmamxnZGd4', 'R3h1Z2d4', 'Qmx1ZUFuZ2VsOTI=', 'SWdja2d4a2c=', 'U2hpbmlnYW1pU2Fvcmk=', 'SWdjaWg0NQ==', 'VGNvZmNnajM0NQ==', 'VGF0YUZhbg==', 'cnVrYXlleA==', 'SWNoaWdvRmFu', 'c29waGlhM3VxNDQ4NTQ0', 'V2hhdEdvZXNJblNwYWNl', 'Y3JhenljYXJz', 'U2F2aW5nZmFjZQ==', 'dGFpbGxwc3ljaG8=', 'TWVnYW1pY3JvZ2FtZXM=', 'SXJvbnN0b21hY2g=', 'VWxmc2hzZmtndXNsaGZsc2dqbHN1b3M=', 'V2FyaW93b3JsZA==', 'YXJrbmd0aHNmYW4=', 'QU5pRkxBSXM=', 'bGlnaHRuaW5nYmVlcmxvY2tjYXQ=', 'Z29vZGthcm1h', 'QmFkS2FybWE=', 'RnJvbnRsaW5lUGxhbmU=', 'Ym91bmNlYmFjaw==', 'aGFpc2xleTVob3dhcmQ=', 'Y3JpbXNvbmVycm9y', 'Tm93aW1tYWQ=', 'SGFwcHlmYW4=', 'cmVhZGluZ3Bybw==', 'U2VhdHVydGxlZmlzaGxvYnN0ZXI=', 'UmV0aXJlbWVudGlzYmVzdA==', 'V2FsbWFydHNob3BwZXI=', 'QkhDZ3Uzc3Q=', 'SW5kaWFuYUJlYWNo', 'NTM4NjUzaHhnamR0', 'VXRzcGZ1bHNnaXN6eWRkaXJldHV1eWY=', 'RGlhbW9uZGJlc3Q=', 'YmFieWJ1dHRlcmZseWlzc2FmZQ==', 'QmVhclRhbGU=', 'dHVydGxlbWVjaGEtdWx0cmE=', 'UnlsZWlnaHVkamY=', 'S2FuZ2Fyb296b28=', 'Q296eWJodHRvbg==', 'bXl1bml2ZXJzZWJ0cw==', 'dG9tYXRvZm9jdXNlZA==', 'S2lzc19teV9heGU=', 'QmVlcC0wS2luZ2RvbUJhdHRsZQ==', 'd2Vsa29tYmlqSEVNQQ==', 'VFY1TW9uZGU=', 'c3RlaWdlbmJlcmdlcg==', 'TWFkYW1lTWFkZW1vaXNlbGxl', 'Ym9uam91cnBhcmlz', 'YmlnYnJlYWs=', 'Q29hc3RieWNvYXN0', 'Y2FsaWZvcm5pYWd1cmxz', 'aGl0NDc=', 'aGlkZV9ieV9mZWVsaW5ncw==', 'dGhlc2VhZmlsZXM=', 'WW9ybWFz', 'VXJzcHJ1bmdsaWNocmVpbg==', 'R3V0ZW5UYWdEZXV0Y2hsYW5k', 'cmFpbmJvd19ibG9vbXM=', 'cGVhY2hfYm95', 'YXNobHluNDV5NDY=', 'cHVkZGluZzQ1Ng==', 'YWluc2xleTV2NjQ1', 'cGVhY2hfbWlsaw==', 'VG9tX1BoYW4=', 'U3Bhd255', 'QmVlcC0wX0tpbmdkb21fQmF0dGxl', 'QmVlcC0w', 'QmVlcDA=', 'S2luZ2RvbWJhdHRsZWZhbg==', 'UGluYUFzYWhpbmE=', 'U2F5YVlha3VzaGk=', 'R0FSTmlERUxpQQ==', 'bW91c2VnaXJs', 'N2FubmV0dGU5OTdpc2RlYWQ=', 'aW1ub3Rhc3BhbWFjY291bnQ=', 'TGF2ZW5hYmVzdA==', 'TmlnaHRjb3JlRmFu', 'd2hhdGh1cnRzdGhlbW9zdA==', 'dGFmZmV0YQ==', 'YnVuZGxlX29mX2xvdmVfc29saWQ=', 'RXZlcmdsb3c=', 'aW1maW5l', 'bWFybmllYmVzdGdpcmw=', 'QmFieXN0ZXBz', 'dGhlX3NwYXJ0YW4=', 'QmFieWtpbnM=', 'aG9uZXlfcG90', 'RWxmZW5fTGllZA==', 'SV9DaGVhdGVkX015c2VsZg==', 'Y2FuZHlfY2FuZQ==', 'TWFyaW9TdHJpa2Vycw==', 'c21odW50', 'c2FtaHVudA==', 'YWx3YXlzYXVnc3Q=', 'aGViZXJ0ZGVhc2ls', 'bWlsa3lfd2F5YmVzdA==', 'bWlsa3l3YXlz', 'cmFpbmJvd2RyZXNzdXA=', 'bm9fbmFtZTE=', 'cmFyZV9yaXBz', 'cmFiYmlkeW9zaGk=', 'ZW5kbGVzc2x5eXlfZm9ycmV2ZXI=', 'ZmFpcnlfcHJpbmNlc3Nfa3Jpc3R5', 'cmFpbmJvd19kb2xs', 'YWVyb2xpdGU=', 'Y2FsaXJvc2UyMzQ=', 'YWJyYWhhbTM0', 'YW1iZXJsZWlnaDQ1eTU=', 'c3VwZXJtYWduaWZpY2VudGV4dHJlbWU=', 'T3JhNDU0','N2FubmV0dGU5OTc=']
                },
                {
                    ids:[1062962, 1247355, 1247353, 1247352, 1245490, 1243739, 1243740, 1237000, 1236999, 1236997, 1236996, 1236998, 1228039, 1228038, 1228036, 1228034, 1228033, 1228031, 1228030, 1228035, 1203673, 1203674, 1203002, 1203003, 1203006, 1164451, 1150095, 1150094, 1146132, 1144614, 1144419, 1144421, 1144535, 1144557, 1144418, 1144794, 1144795, 1144796, 1144797, 1144772, 1144779, 1144764, 1144771, 1144750, 1144761, 1144588, 1144594, 1144604, 1144580, 1144584, 1144563, 1144568, 1144570, 1144573, 1144553, 1144554, 1144556, 1144546, 1144550, 1144542, 1144544, 1144545, 1144539, 1144540, 1144541, 1144416, 1144399, 1144392, 1144386, 1145033, 1145039, 1145042, 1144985, 1144986, 1144965, 1144966, 1144914, 1144929, 1144933, 1144862, 1144866, 1144873, 1144880, 1144890, 1144896, 1144901, 1144905, 1144913, 1144847, 1144848, 1144853, 1144798, 1144799, 1144800, 1144802, 1144821, 1144823, 1144838, 1144837, 1145002, 1145001, 1145000, 1144999, 1144998, 1144997, 1144996, 1144995, 1144993, 1144990, 1144315, 1144314, 1132993, 1144378, 1144377, 1144369, 1144370, 1144371, 1144372, 1144374, 1144375, 1144376, 1144373, 1144348, 1144349, 1144346, 1144345, 1144344, 1144343, 1144342, 1144341, 1144347, 1144337, 1144336, 1144334, 1144335, 1144304, 1144305, 1144306, 1144307, 1144303, 1144302, 1144301, 1144300, 1144299, 1144194, 1144193, 1144192, 1144191, 1144179, 1144177, 1144178, 1144175, 1144174, 1144173, 1144172, 1144171, 1144170, 1144176, 1144149, 1144148, 1144147, 1144146, 1144145, 1144144, 1144143, 1144164, 1144142, 1144165, 1144166, 1144167, 1144168, 1144169, 1144141, 1144163, 1144162, 1144161, 1144160, 1144151, 1144152, 1144153, 1144154, 1144155, 1144156, 1144157, 1144158, 1144159, 1144150, 1144140, 1143952, 1143947, 1143944, 1143903, 1143924, 1143901, 1143908, 924098, 1137764, 1134230, 1134235, 1134234, 1134233, 1134232, 1134231, 1134236, 1134228, 1134229, 1134227, 1134225, 1134226, 1134223, 1134224, 1134220, 1134221, 1134219, 1134216, 1134214, 1134215, 1134211, 1134210, 1134209, 1134212, 1134206, 1134207, 1134205, 1134203, 1134204, 1134201, 1134200, 1134199, 1134197, 1134196, 1134195, 1134194, 1134193, 1134198, 1134192, 1134190, 1133837, 1133838, 1133835, 1133836, 1133834, 1133833, 1133830, 1133831, 1133828, 1133827, 1133825, 1133823, 1133822, 1133820, 1133819, 1133818, 1133817, 1133816, 1133821, 1133815, 1133621, 1133614, 1133618, 1133617, 1133616, 1133615, 1133619, 1133613, 1133612, 1133611, 1133610, 1133607, 1133606, 1133605, 1133604, 1133603, 1133608, 1133602, 1133499, 1133497, 1133496, 1133494, 1133495, 1133492, 1133491, 1133490, 1133489, 1133488, 1133493, 1133401, 1133415, 1133413, 1133414, 1133411, 1133412, 1133410, 1133408, 1133407, 1133409, 1133405, 1133406, 1133403, 1132975, 1132976, 1133225, 1133224, 1133226, 1133218, 1133222, 1133221, 1133220, 1133219, 1133223, 1133216, 1133214, 1133215, 1133212, 1133211, 1133210, 1133209, 1133208, 1133213, 1133207, 1133010, 1133011, 1133008, 1133007, 1133006, 1133005, 1133004, 1133009, 1133002, 1133003, 1132992, 1132991, 1132984, 1132985, 1132986, 1132979, 1132980, 1132981, 1132982, 1132978, 1132977, 1132973, 1132974, 1132971, 1132970, 1132969, 1132972, 1132966, 1132967, 1132968, 1132963, 1132962, 1132964, 1132960, 1132959, 1132958, 1132957, 1132956, 1132953, 1132954, 1132951, 1132949, 1132950, 1132948, 1132946, 1132943, 1132942, 1132944, 1132939, 1132940, 1132938, 1132769, 1132772, 1132771, 1132770, 1132773, 1132767, 1132768, 1132765, 1132764, 1132766, 1132763, 1132761, 1132760, 1132762, 1132758, 1132756, 1132755, 1132759, 1132754, 1132601, 1132600, 1132599, 1132598, 1132597, 1132602, 1132595, 1132596, 1132590, 1132588, 1132592, 1132591, 1132586, 1132584, 1132583, 1132582, 1132581, 1132585, 1132580, 1132579, 1132577, 1132576, 1132575, 1132574, 1132573, 1132578, 1132572, 1132445, 1132438, 1132443, 1132442, 1132441, 1132440, 1132439, 1132444, 1132437, 1132436, 1132431, 1132430, 1132432, 1132428, 1132427, 1132426, 1132429, 1132425, 1132035, 1132034, 1132033, 1132032, 1132031, 1132030, 1132036, 1132028, 1132029, 1132024, 1132020, 1132018, 1132015, 1132016, 1132013, 1132014, 1132011, 1132009, 1132008, 1132007, 1132005, 1132004, 1132003, 1132000, 1131998, 1131997, 1131996, 1131995, 1131999, 1131993, 1131994, 1131921, 1131920, 1131919, 1131918, 1131922, 1131913, 1131916, 1131915, 1131914, 1131917, 1131910, 1131909, 1131908, 1131907, 1131906, 1131905, 1131904, 1131903, 1131911, 1131901, 1131866, 1131865, 1131864, 1131863, 1131862, 1131861, 1131860, 1131859, 1131867, 1131858, 1131739, 1131740, 1131737, 1131736, 1131735, 1131734, 1131733, 1131732, 1131738, 1131731, 1131729, 1131726, 1131723, 1131722, 1131719, 1131718, 1131717, 1131716, 1131715, 1131720, 1131561, 1131560, 1131559, 1131558, 1131557, 1131556, 1131555, 1131554, 1131562, 1131553, 1131525, 1131523, 1131521, 1131520, 1131519, 1131518, 1131517, 1131516, 1131524, 1131515, 1131501, 1131502, 1131503, 1131500, 1131497, 1131496, 1131495, 1131494, 1131498, 1131471, 1131470, 1131469, 1131472, 1131467, 1131466, 1131465, 1131468, 1131463, 1131455, 1131461, 1131460, 1131459, 1131458, 1131457, 1131456, 1131462, 1131454, 1131450, 1131449, 1131448, 1131446, 1131444, 1131445, 1131442, 1131441, 1131443, 1131438, 1131440, 1131416, 1131407, 1131413, 1131412, 1131411, 1131410, 1131409, 1131408, 1131415, 1131392, 1131385, 1131390, 1131389, 1131388, 1131387, 1131386, 1131391, 1131371, 1131370, 1131369, 1131368, 1131367, 1131366, 1131372, 1131364, 1131361, 1131360, 1131362, 1131353, 1131358, 1131357, 1131356, 1131355, 1131354, 1131359, 1131347, 1131346, 1131348, 1131339, 1131344, 1131343, 1131342, 1131341, 1131340, 1131345, 1130416, 1131324, 1131323, 1131322, 1131321, 1131320, 1131325, 1131316, 1131318, 1131317, 1131319, 1131277, 1131268, 1131269, 1131270, 1131271, 1131272, 1131274, 1131307, 1131308, 1131299, 1131305, 1131304, 1131303, 1131302, 1131301, 1131300, 1131306, 1131275, 1131298, 1131295, 1131294, 1131293, 1131292, 1131291, 1131290, 1131289, 1131288, 1131296, 1097685, 1131267, 1131264, 1131261, 1131260, 1131259, 1131258, 1131263, 1131255, 1131254, 1131253, 1131252, 1131251, 1131250, 1131249, 1131256, 1131247, 1131248, 1097678, 1097677, 1090462, 1131184, 1131183, 1131182, 1131181, 1131180, 1131178, 1131177, 1131179, 1131135, 1131134, 1131133, 1131132, 1131131, 1131130, 1131129, 1131128, 1131136, 1130934, 1130935, 1130932, 1130931, 1130930, 1130929, 1130928, 1130933, 1130834, 1130831, 1130830, 1130829, 1130828, 1130827, 1130826, 1130825, 1130823, 1106158, 1130759, 1130758, 1130760, 1130756, 1130755, 1130754, 1130753, 1130752, 1130757, 1130742, 1130741, 1130740, 1130739, 1130738, 1130743, 1130659, 1130658, 1130657, 1130656, 1130655, 1130654, 1130652, 1130651, 1130650, 1130649, 1130589, 1130588, 1130587, 1130586, 1130584, 1130585, 1130583, 1130581, 1130582, 1130579, 1130580, 1130578, 1130577, 1130576, 1130575, 1130573, 1130574, 1130572, 1130571, 1130570, 1130569, 1130568, 1130567, 1130566, 1130565, 1130564, 1130517, 1130516, 1130515, 1130514, 1130518, 1130511, 1130510, 1130509, 1130508, 1130507, 1130512, 1090351, 1130469, 1130468, 1130467, 1130466, 1130470, 1130464, 1130463, 1130462, 1130461, 1130465, 1130426, 1130425, 1130424, 1130423, 1130422, 1130427, 1130413, 1130412, 1130409, 1130408, 1130407, 1130406, 1130405, 1130404, 1130403, 1130410, 1130379, 1130355, 1130376, 1130373, 1130369, 1130370, 1130371, 1130372, 1130367, 1130368, 1130356, 1130357, 1130358, 1130362, 1130360, 1130361, 1130363, 1130343, 1130345, 1130346, 1130347, 1130348, 1130349, 1130351, 1130344, 1130338, 1130337, 1130336, 1130335, 1130334, 1130333, 1130332, 1130331, 1130339, 1130322, 1130321, 1130320, 1130319, 1130318, 1130317, 1130316, 1130315, 1130323, 1130301, 1130300, 1130299, 1130298, 1130297, 1130296, 1130295, 1130294, 1130293, 1130292, 1130295, 1130290, 1130289, 1130291, 1130287, 1130286, 1130285, 1130288, 1130284, 1130282, 1130283, 1130274, 1130273, 1130271, 1130272, 1130269, 1130270, 1130267, 1130266, 1130268, 1130264, 1130265, 1130253, 1130252, 1130251, 1130249, 1130250, 1130239, 1130235, 1130234, 1130226, 1130225, 1130227, 1130218, 1130216, 1130215, 1130217, 1130213, 1130211, 1130212, 1130209, 1130208, 1130210, 1130201, 1130200, 1130195, 1130196, 1130194, 1130193, 1130191, 1130189, 1130190, 1130188, 1130187, 1130183, 1130182, 1130184, 1130181, 1130179, 1130180, 1130177, 1130176, 1130178, 1130046, 1130038, 1130039, 1130040, 1130041, 1130035, 1130036, 1130037, 1130033, 1130034, 1130032, 1130025, 1130023, 1130022, 1130024, 1130020, 1130019, 1130021, 1130006, 1130004, 1130007, 1129996, 1129997, 1129989, 1129990, 1129987, 1129988, 1129985, 1129984, 1129986, 1129982, 1129981, 1129983, 1129977, 1129978, 1129979, 1129980, 1129974, 1129975, 1129976, 1129973, 1129972, 1129971, 1129969, 1129965, 1129966, 1129967, 1129968, 1129963, 1129964, 1129962, 1129961, 1129960, 1129959, 1129954, 1129955, 1129956, 1129957, 1129958, 1129951, 1129952, 1129953, 1129950, 1118478, 1124715, 1093271, 1093269, 1093267, 1093266, 1093268, 1093259, 1093258, 1093257, 1093256, 1093255, 1093260, 1093253, 1093252, 1093251, 1093250, 1093254, 1093235, 1093223, 1093222, 1093220, 1093219, 1093218, 1093217, 1093221, 1093215, 1093214, 1093213, 1093212, 1093216, 1093175, 1093172, 1093171, 1093170, 1093169, 1093168, 1093173, 1093166, 1093165, 1093164, 1093163, 1093167, 1093148, 1093150, 1093146, 1093149, 1093145, 1093147, 1093141, 1093140, 1093137, 1093139, 1093138, 1093136, 1093107, 1093106, 1093104, 1093105, 1093103, 1093101, 1093100, 1093099, 1093098, 1093102, 1093096, 1093097, 1093072, 1093071, 1093069, 1093068, 1093067, 1093070, 1093065, 1093064, 1093063, 1093062, 1093061, 1093066, 1093054, 1093052, 1093050, 1093049, 1093048, 1093047, 1093051, 1093045, 1093044, 1093043, 1093042, 1093046, 1092996, 1092997, 1092994, 1092993, 1092992, 1092995, 1092990, 1092989, 1092988, 1092987, 1092991, 1092962, 1092957, 1092956, 1092959, 1092954, 1092953, 1092952, 1092951, 1092950, 1092955, 1092947, 1092949, 1092941, 1092939, 1092938, 1092937, 1092936, 1092935, 1092940, 1092934, 1092932, 1092933, 1092931, 1092928, 1092927, 1092926, 1092925, 1092929, 1092923, 1092922, 1092924, 1092920, 1092921, 1092918, 1092794, 1092793, 1092792, 1092791, 1092790, 1092789, 1092788, 1092787, 1092786, 1092785, 1092784, 1092780, 1092635, 1092630, 1092631, 1092632, 1092633, 1092634, 1092625, 1092626, 1092627, 1092628, 1092629, 1092601, 1092602, 1092603, 1092604, 1092605, 1092596, 1092597, 1092598, 1092599, 1092600, 1092595, 1092574, 1092571, 1092572, 1092565, 1092566, 1092567, 1092568, 1092569, 1092570, 1092563, 1092564, 1092545, 1092539, 1092540, 1092541, 1092542, 1092543, 1092544, 1092535, 1092536, 1092537, 1092538, 1092523, 1092524, 1092525, 1092526, 1092527, 1092509, 1092510, 1092512, 1092513, 1092514, 1092515, 1092516, 1092505, 1092506, 1092507, 1092508, 1092501, 1092499, 1092500, 1092494, 1092476, 1092477, 1092472, 1092474, 1092475, 1092479, 1092478, 1092480, 1092481, 1092485, 1092482, 1092164, 1092163, 1092162, 1092165, 1092160, 1092159, 1092158, 1092157, 1092156, 1092161, 1092155, 1092134, 1092133, 1092135, 1092131, 1092130, 1092129, 1092132, 1092127, 1092126, 1092125, 1092128, 1092115, 1092113, 1092112, 1092116, 1092110, 1092109, 1092108, 1092107, 1092106, 1092111, 1092081, 1092079, 1092077, 1092076, 1092075, 1092074, 1092078, 1092072, 1092071, 1092070, 1092073, 1092061, 1092057, 1092056, 1092058, 1092054, 1092053, 1092052, 1092051, 1092050, 1092049, 1092055, 1092001, 1092002, 1091999, 1091998, 1091997, 1092000, 1091995, 1091994, 1091992, 1091996, 1091991, 1091963, 1091962, 1091960, 1091959, 1091958, 1091957, 1091961, 1091955, 1091954, 1091953, 1091956, 1091939, 1091940, 1091937, 1091936, 1091935, 1091933, 1091932, 1091938, 1091930, 1091929, 1091931, 1091928, 1091925, 1091926, 1091923, 1091922, 1091921, 1091920, 1091919, 1091924, 1091917, 1091918, 1091819, 1091814, 1091810, 1091808, 1091817, 1091806, 1091809, 1091816, 1091815, 1091812, 1091813, 1091811, 1091747, 1091746, 1091748, 1091744, 1091740, 1091736, 1091733, 1091732, 1091731, 1091730, 1091729, 1091734, 1091727, 1091726, 1091725, 1091724, 1091728, 1091691, 1091687, 1091686, 1091685, 1091684, 1091688, 1091672, 1091673, 1091670, 1091669, 1091668, 1091667, 1091666, 1091671, 1091664, 1091663, 1091665, 1091639, 1091640, 1091637, 1091636, 1091635, 1091638, 1091633, 1091632, 1091631, 1091630, 1091634, 1091617, 1091614, 1091615, 1091606, 1091603, 1091601, 1091604, 1091599, 1091598, 1091597, 1091596, 1091600, 1091594, 1091593, 1091595, 1091560, 1091558, 1091557, 1091561, 1091556, 1091555, 1091554, 1091559, 1091540, 1091539, 1091537, 1091541, 1091535, 1091534, 1091533, 1091536, 1091531, 1091530, 1091532, 1091523, 1091522, 1091521, 1091520, 1091519, 1091524, 1091517, 1091516, 1091518, 1091514, 1091515, 1091484, 1091483, 1091485, 1091481, 1091480, 1091479, 1091482, 1091477, 1091476, 1091475, 1091478, 1091443, 1091442, 1091440, 1091444, 1091438, 1091437, 1091436, 1091439, 1091434, 1091433, 1091435, 1091425, 1091423, 1091422, 1091426, 1091419, 1091418, 1091420, 1091416, 1091415, 1091414, 1091417, 1091409, 1091408, 1091407, 1091410, 1091406, 1091404, 1091403, 1091402, 1091401, 1091405, 1091400, 1091389, 1091390, 1091387, 1091386, 1091385, 1091384, 1091388, 1091382, 1091381, 1091380, 1091383, 1091369, 1091368, 1091367, 1091370, 1091366, 1091364, 1091363, 1091362, 1091365, 1091360, 1091361, 1091344, 1091343, 1091345, 1091341, 1091340, 1091342, 1091330, 1091326, 1091324, 1091323, 1091322, 1091321, 1091325, 1091319, 1091318, 1091317, 1091316, 1091320, 1091209, 1091208, 1091210, 1091203, 1091202, 1091194, 1091192, 1091191, 1091189, 1091190, 1091185, 1091183, 1091181, 1091180, 1091179, 1091178, 1091182, 1091176, 1091177, 1091172, 1091173, 1091174, 1091169, 1091168, 1091167, 1091170, 1091165, 1091164, 1091163, 1091162, 1091161, 1091166, 1091160, 1091156, 1091153, 1091154, 1091144, 1091145, 1091143, 1091141, 1091140, 1091142, 1091139, 1091137, 1091135, 1091134, 1091133, 1091136, 1091131, 1091132, 1090667, 1090670, 1090668, 1090669, 1090259, 1090263, 1090120, 1090119, 1090118, 1090117, 1090116, 1090115, 1090114, 1090113, 1090112, 1090111, 1090110, 1090109, 1089402, 1089401, 1089400, 1089403, 1089398, 1089396, 1089395, 1089394, 1089393, 1089392, 1089397, 1089384, 1089385, 1089386, 1089380, 1089381, 1089382, 1089383, 1089378, 1089379, 1089375, 1089376, 1089372, 1089373, 1089370, 1089369, 1089368, 1089367, 1089366, 1089365, 1089364, 1089371, 1087601, 1087472, 1087473, 1087469, 1087467, 1087466, 1087465, 1087464, 1087468, 1087462, 1087463, 1087460, 1087461, 1087426, 1087424, 1087423, 1087422, 1087421, 1087425, 1087419, 1087418, 1087417, 1087416, 1087420, 1087379, 1087164, 1087015, 1086888, 1086889, 1086886, 1086885, 1086884, 1086887, 1086882, 1086881, 1086880, 1086883, 1086879, 1086838, 1086834, 1086833, 1086832, 1086831, 1086835, 1086829, 1086828, 1086827, 1086826, 1086830, 1086825, 1086530, 1086509, 1086780, 1086779, 1086778, 1086777, 1086776, 1086642, 1086475, 1086438, 1086432, 1086430, 1086429, 1086428, 1086427, 1086431, 1086425, 1086424, 1086423, 1086426, 1086422, 1086330, 1086329, 1086326, 1086325, 1086324, 1086327, 1086322, 1086321, 1086320, 1086319, 1086323, 1086318, 1086283, 1086258, 1086256, 1086255, 1086254, 1086253, 1086252, 1086257, 1086250, 1086251, 1086249, 1086209, 1086207, 1086206, 1086198, 1086203, 1086204, 1086201, 1086202, 1086199, 1086200, 1085937, 1085936, 1085938, 1085935, 1085932, 1085930, 1085929, 1085928, 1085927, 1085931, 1085925, 1085924, 1085923, 1085922, 1085926, 1085910, 1085839, 1085841, 1085838, 1085834, 1085835, 1085833, 1085831, 1085832, 1085830, 1085828, 1085827, 1085826, 1085825, 1085829, 1085720, 1085721, 1085718, 1085717, 1085716, 1085714, 1085713, 1085719, 1085711, 1085712, 1085709, 1085678, 1085677, 1085675, 1085672, 1085673, 1085674, 1085670, 1085671, 1085663, 1085664, 1085661, 1085660, 1085659, 1085658, 1085657, 1085662, 1085655, 1085656, 1085654, 1085635, 1085436, 1085443, 1085504, 1085609, 1085610, 1085607, 1085606, 1085605, 1085604, 1085608, 1085601, 1085602, 1085603, 1085600, 1085599, 1085597, 1085596, 1085595, 1085594, 1085592, 1085598, 1085353, 1085288, 1085234, 1085233, 1085232, 1085231, 1085230, 1085229, 1085228, 1085227, 1085226, 1085225, 1085223, 1085203, 1085204, 1085201, 1085200, 1085199, 1085202, 1085193, 1085192, 1085194, 1085190, 1085189, 1085188, 1085187, 1085191, 1085185, 1085184, 1085186, 1085008, 1085097, 1084985, 1084974, 1084975, 1084976, 1084969, 1084970, 1084971, 1084973, 1084967, 1084968, 1084966, 1084911, 1084909, 1084908, 1084907, 1084906, 1084905, 1084904, 1084910, 1084820, 1084821, 1084822, 1084823, 1084824, 1084825, 1084826, 1084827, 1084828, 1084829, 1084830, 1084744, 1084597, 1084791, 1084792, 1084789, 1084784, 1084788, 1084786, 1084787, 1084785, 1084746, 1084745, 1084544, 1084518, 1084424, 1084419, 1084418, 1084417, 1084415, 1084414, 1084413, 1084412, 1084411, 1084410, 1084379, 1084246, 1084204, 1084205, 1084206, 1084199, 1084200, 1084201, 1084202, 1084203, 1084196, 1084197, 1084198, 1084194, 1084168, 1084173, 1084171, 1084175, 1084174, 1084169, 1084046, 1083914, 1083913, 1083910, 1083905, 1083906, 1083907, 1083908, 1083909, 1083904, 1083903, 1083867, 1083865, 1083832, 1083825, 1083819, 1083820, 1083821, 1083822, 1083823, 1083824, 1083818, 1083817, 1083790, 1083788, 1083776, 1083741, 1083688, 1083687, 1083684, 1083682, 1083680, 1083621, 1083620, 1083619, 1083618, 1083615, 1083597, 1083596, 1083595, 1083594, 1083592, 1083591, 1083590, 1083721, 1083702, 1083689, 1083686, 1083685, 1083683, 1083681, 1083679, 1083678, 1083676, 1083668, 1083634, 1083622, 1083617, 1083614, 1083613, 1083598, 1083593, 1083588, 1083587, 1083428, 1083409, 1083403, 1083397, 1083396, 1083356, 1083357, 1083315, 1083314, 1083313, 1083312, 1083311, 1083310, 1082041, 1082065, 1081951, 1081741, 1081698, 1081642, 1081614, 1081492, 1081400, 1081380, 1081371, 1081367, 1081355, 1081293, 1081305, 1081292, 1081291, 1081282, 1081283, 1081284, 1081285, 1081277, 1081278, 1081279, 1081280, 1081281, 1081275, 1081274, 1081215, 1081214, 1080882, 1081110, 1081105, 1081097, 1081078, 1081077, 1081073, 1081075, 1081074, 1081076, 1081068, 1081069, 1081070, 1081071, 1080397, 1080398, 1080402, 1080404, 1080407, 1080409, 1080411, 1080412, 1080413, 1080414, 1080417, 1080418, 1080423, 1080424, 1080427, 1080428, 1080429, 1080430, 1080431, 1080432, 1080433, 1080434, 1080435, 1080436, 1080088, 1080149, 1080151, 1080152, 1080153, 1080155, 1080156, 1080157, 1080158, 1080159, 1080161, 1080164, 1080165, 1080166, 1080184, 1080187, 1079712, 1079984, 1079986, 1079423, 1079286, 1079528, 1079529, 1078957, 1078820, 1078769, 1078680, 1078678, 1078672, 1078656, 1078654, 1078653, 1078652, 1078650, 1078649, 1078645, 1078288, 1078554, 1078508, 1078519, 1078469, 1078466, 1078459, 1078458, 1078418, 1078425, 1078428, 1078429, 1078430, 1078431, 1078432, 1078433, 1078434, 1078435, 1078448, 1078449, 1078450, 1078451, 1078178, 1078084, 1078040, 1077860, 1077812, 1077794, 1077534, 1077733, 1077666, 1077649, 1077648, 1077530, 1077503, 1077393, 1077284, 1077280, 1077114, 1077047, 1076937, 1076831, 1076796, 1076677, 1076630, 1076593, 1076493, 1076280, 1076149, 1076145, 1076086, 1076131, 1076092, 1076085, 1076081, 1076080, 1076022, 1075908, 1075778, 1075758, 1075648, 1075678, 1075559, 1075647, 1075422, 1075324, 1075193, 1075190, 1075023, 1074828, 1074465, 1074610, 1074469, 1074248, 1074136, 1074139, 1074135, 1074006, 1073866, 1073789, 1073626, 1073403, 1073402, 1072993, 1072876, 1072639, 1072513, 1072480, 1072293, 1072291, 1072287, 1072101, 1072100, 1071924, 1071757, 1071754, 1071714, 1071713, 1071564, 1071444, 1071443, 1071372, 1071373, 1071374, 1071375, 1071376, 1071377, 1071378, 1071371, 1071178, 1071226, 1071264, 1071263, 1071225, 1071177, 1071033, 1071015, 1071014, 1070839, 1070929, 1070686, 1070685, 1070590, 1070468, 1070344, 1070346, 1070345, 1070342, 1070341, 1070340, 1070339, 1070334, 1070333, 1070335, 1070284, 1070283, 1070258, 1070257, 1070203, 1070202, 1070069, 1070066, 1069957, 1069918, 1069916, 1069825, 1069823, 1069790, 1069795, 1069794, 1069789, 1069676, 1069520, 1069510, 1069247, 1069168, 1069126, 1069084, 1069045, 1069043, 1069008, 1068899, 1069080, 1069017, 1068972, 1068896, 1068802, 1068799, 1068770, 1068753, 1068741, 1068742, 1068743, 1068740, 1068652, 1068689, 1068635, 1068653, 1068614, 1068616, 1068411, 1067200, 1067201, 1067202, 1067521, 1067733, 1068170, 1068382, 1068394, 1068378, 1068376, 1068379, 1068380, 1067805, 1067831, 1067848, 1067902, 1068232, 1068244, 1066929, 1067022, 1067100, 1067118, 1067131, 1067140, 1067169, 1067186, 1067199, 1067339, 1067428, 1067439, 1067522, 1067551, 1067576, 1067726, 1067847, 1067900, 1067938, 1068120, 1068154, 1068252, 1068258, 1068270, 1068302, 1067733, 1067521, 1067200, 1067201, 1067202, 1068170, 1068382, 1068394, 1068378, 1068376, 1068379, 1068380, 1067805, 1067831, 1067848, 1067902, 1068232, 1068244, 1066929, 1067022, 1067100, 1067118, 1067131, 1067140, 1067169, 1067186, 1067199, 1067339, 1067428, 1067439, 1067522, 1067551, 1067576, 1067726, 1067847, 1067900, 1067938, 1068120, 1068154, 1068252, 1068258, 1068270, 1068302, 1068310, 1068317, 1068335, 1068336, 1068347, 1068377, 1068387, 1068382, 1068387, 1068378, 1068376, 1068379, 1068380, 1068377, 1068347, 1068336, 1068335, 1068317, 1068310, 1068302, 1068270, 1068258, 1068252, 1068154, 1068244, 1068232, 1067938, 1067848, 1067805, 1067733, 1067902, 1067900, 1067847, 1067726, 1067831, 1067576, 1067551, 1067521, 1067522, 1067439, 1067428, 1067339, 1067202, 1067201, 1067200, 1067199, 1067186, 1067169, 1067140, 1067131, 1067118, 1067100, 1067022, 1066929, 1066824, 1066818, 1066808, 1066797, 1066788, 1066761, 1066749, 1066688, 1066561, 1066436, 1066435, 1066423, 1066414, 1066406, 1066391, 1066385, 1066379, 1066338, 1066319, 1066236, 1066233, 1066210, 1066084, 1066060, 1066051, 1066047, 1066046, 1066043, 1066042, 1066039, 1066034, 1066032, 1066030, 1066029, 1066028, 1066026, 1066025],
                    usernames:['SXNoaW5hc2hp', 'TWlzc2luZ3l1cml0YWdfZWV3', 'R2F5c2hpdGltcGFjdGNyaWpnZQ==', 'R3Jvc3NkeWtlc2hpdA==', 'R2F5c2hpdEltYWN0Q3Jpbmdl', 'Q3JpbmdlX3NoZWlzbnRsYXRpbmE=', 'U2t5bGFpc1doaXRl', 'Q3JpbmczMw==', 'UGVkb2R5a2VhbmltZQ==', 'TWFuWFdvbWFu', 'TWFycmlhZ2Vpc29ubHk=', 'SG9tb3NleHVhbGl0eURpc2Vhc2U=', 'RGllX2hveW92ZXJzZUZfYWdzX2ZhbnM=', 'R3Jvc3NfWXVyaXNoaXQ=', 'Rml4WW91clRhZ3NfZl9hZ290cw==', 'R3Jvc3NmdXJyeXNoaXQ=', 'Qm90aF9IZXRlcm8=', 'R3Jvc3NkeWtlc2hpdA==', 'R3Jvc3NnYXlzaGl0', 'Rml4WW91cnRhZ3NGX2FnZ290cw==', 'R3Jvc3NfYmxhY2t3YXNoaW5n', 'QWx3YXlzdGhlZ2Vuc2hpdGZhbnM=', 'R3Jvc3NibGFja3dhc2hpbmc=', 'R2F5c2hpdGltcGFjdGZhbmRjcmluZ2U=', 'RDFlX24xZ19nZXJz', 'TWVudGFsaWxsbmVzc2ZhX2dnb3Q=', 'a2VpYmxlaF9reXNfZjRfZ2dvdA==', 'Rl80Z2dvdA==', 'R3Jvc3NfRl9hZ2dvdF9waWM=', 'UHVyZGQ=', 'UHVzbng=', 'UHlhc2I=', 'UHV2YWJ6', 'UGhnZmdn', 'U2pzamVqZWo=', 'UGhnZ2c=', 'VXRkZmM=', 'QmRkZnR0', 'UHlyZWQ=', 'VHdyeXk=', 'UGpieHI=', 'UGFkaHhu', 'THV6Yng=', 'UHVyNw==', 'SnRkY2Y=', 'UHVldWc=', 'UHlycnJy', 'RXRoY2M=', 'SHV1aA==', 'V2pzYno=', 'RWhkYg==', 'UGhiYnY=', 'UHlnZ2dn', 'UGlnYw==', 'THN0dnh4', 'SHRycnI=', 'UHVndnZ2dg==', 'WXJkeGM=', 'TXRyZHg=', 'VHllZmM=', 'UHVyZmM=', 'UHlmY3Y=', 'UHVnYmI=', 'UGdiYmNm', 'UHV2ZGZm', 'TWFoZGJk', 'V2pkbmRubg==', 'SGJ6aHNqcw==', 'UHVzYmRi', 'SXRkeHo=', 'SnJycmRk', 'UHV0d3c=', 'UG1pZno=', 'SHJzeg==', 'UHl2Yw==', 'SGR0aHY=', 'VXJ4Y3Z2', 'SGZ2YmI=', 'RWVld3dh', 'UHVhYnNi', 'UHlyc3o=', 'UHl5eWc=', 'UHVnZ3p2', 'QXNuem4=', 'UHVyc2Y=', 'S2dkZHR0Ng==', 'UHVyZHN2', 'VXRlZQ==', 'UGl0ZXc=', 'UHVyc2E2', 'UHV0cnNk', 'QXdyeXk=', 'RmVzc3M=', 'VHJyZWV4', 'UHVhdmE=', 'UHVmZA==', 'UHV0ZWc=', 'SHZjY2Rhdg==', 'SHZjY2Rh', 'Zl9hZ2dvdHNkZWFk', 'ZHlrZXM=', 'dHJhbm5pZXM=', 'bmlnZ19lcnM=', 'Y3JlcGF0ZQ==', 'ZmlnbGlkaXB1dHRhbmE=', 'ZGllZWVlZQ==', 'Zl9hZ2dvdHM=', 'cHlmZnY=', 'bmlmaG9s', 'R1JTX0dFVENPUlJFQ1RJT05fRFlLRQ==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlMQ==', 'ZG93bnZvdGVOSUdHM0VScGlj', 'Z3JzRFlLRUIxVENIOA==', 'Z3JzRFlLRUIxVENINw==', 'RjRfZw==', 'Z3JzRFlLRUIxVENI', 'Z3JzRFlLRUIxVENIMQ==', 'Z3JzRFlLRUIxVENIMg==', 'Z3JzRFlLRUIxVENINA==', 'Z3JzRFlLRUIxVENINQ==', 'Z3JzRFlLRUIxVENINg==', 'Z3JzRFlLRUIxVENIMw==', 'Rl9hZ2dvdHM1', 'Rl9hZ2dvdHM2', 'Rl9hZ2dvdHMz', 'Rl9hZ2dvdHMy', 'Rl9hZ2dvdHMx', 'Rl9hZ2dvdHM=', 'SG9ua2FpRl9hZ19yYWls', 'RHlrZXNnZXRjb3JyZXRpb24=', 'Rl9hZ2dvdHM0', 'bGdidERJU0VBU0Uy', 'bGdidERJU0VBU0Ux', 'bWFuemho', 'bGdidERJU0VBU0U=', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlNQ==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlNg==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlNw==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlOA==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlNA==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlMw==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlMg==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlMQ==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNl', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlMw==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlMg==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlMQ==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNl', 'VXB2b3RlX2FtYmVycGlj', 'VXB2b3RlX2theW9rb3BpYw==', 'VXB2b3RlX3l1bWVwaWM=', 'VXB2b3RlYnJlbWVydG9ucGlj', 'VXB2b3Rla29oYXJ1cGlj', 'VXB2b3Rla3VyaWFwaWM=', 'VXB2b3RlcG9tdXBpYw==', 'VXB2b3Rlc3RlbGxlcGlj', 'VXB2b3RlTWFyaW5lcGlj', 'RG93bnZvdGVfZHlrZW1ha2lfcGlj', 'RHlrZUdldENvcnJlY3Rpb244', 'RHlrZUdldENvcnJlY3Rpb243', 'RHlrZUdldENvcnJlY3Rpb242', 'RHlrZUdldENvcnJlY3Rpb241', 'RHlrZUdldENvcnJlY3Rpb240', 'RHlrZUdldENvcnJlY3Rpb24z', 'RHlrZUdldENvcnJlY3Rpb24y', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlNA==', 'RHlrZUdldENvcnJlY3Rpb24x', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlNQ==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlNg==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlNw==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlOA==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlOQ==', 'RHlrZUdldENvcnJlY3Rpb24=', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlMw==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlMg==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlMQ==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNl', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlMQ==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlMg==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlMw==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlNA==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlNQ==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlNg==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlNw==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlOA==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNlOQ==', 'SG9tb3NleHVhbGl0eV9EaXNlYXNl', 'QXNieg==', 'bWFzaGxl', 'UHViYQ==', 'TXl0dnM=', 'UGl5eg==', 'TWl0Zg==', 'TWF0eno=', 'TWlzaGg=', 'TWF0eg==', 'R2FsYWE=', 'eGJkYmRuZG4=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'dXB2b3RlX2FydV9waWM=', 'dXB2b3RlX21ha2ltYV9waWM=', 'dXB2b3RlX3JhaWRlbl9waWM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'dXB2b3RlX2Frb19waWM=', 'dXB2b3RlX2RlbHRhX3BpYw==', 'dXB2b3RlX3JlaW5ldGFuX3BpY3M=', 'dXB2b3RlX2thZmthX3BpYw==', 'dXB2b3RlX2h1dGFvX3BpYw==', 'dXB2b3RlX2thcmluYm9vYmFfcGlj', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'dXB2b3RlX21ha2ltYXNzX3BpYw==', 'Zl9hZ2dvdHMy', 'dXB2b3RlX3JlaXl1X3BpYw==', 'dXB2b3RlX3dha2Ftb19waWM=', 'dXB2b3RlX21hcmlfcGlj', 'dXB2b3RlX2thcmluX3BpYw==', 'dXB2b3RlX3l1dWthX3BpYw==', 'dXB2b3RlX25vYV9waWM=', 'dXB2b3RlX2hld3NfcGlj', 'dXB2b3RlX2tvaGFydV9waWM=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'dXB2b3RlX3BvbGljZV9ib29iYV9waWM=', 'bnNuZGJ4Yg==', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHMy', 'em54bnhuYw==', 'Zl9hZ2dvdHM=', 'dXB2b3RlX25vYV9waWM=', 'dXB2b3RlX2theW9rb19waWM=', 'ZG93bnZvdGVfTklHX0dFUlNfUElD', 'ZG93bnZvdGVfTklHX0dFUl9QSUM=', 'ZG93bnZvdGVfTklHX0dFUlNfUElDUw==', 'dXB2b3RlX3Jpb19waWM=', 'dXB2b3RlX2thcmluX3BpYw==', 'dXB2b3RlX2FzdW5hX3BpY3M=', 'dXB2b3RlX2thenVzYV9waWNz', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'bWhhbnp6eno=', 'Zl9hZ2dvdHM1', 'ZnJvY2k=', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM0', 'Zl9hZ3NBbmRXZWlyZG9z', 'dHJhbm5pZXM=', 'dXB2b3RlX2thZmthX3BpYw==', 'dXB2b3RlX25hdmlhX3BpYw==', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'ZmFfZ3Nz', 'bmlja2Vycw==', 'dXB2b3RlX21hcmluX3BpYw==', 'dXB2b3RlX2dhbnl1X3BpYw==', 'dXB2b3RlX2F5YWthX3BpYw==', 'dXB2b3RlX3lhZV9waWM=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'bmlnZ19lcnM=', 'YnhodnluZA==', 'dXB2b3RlX3NhdHN1a2lfcGlj', 'dXB2b3RlX3JhaWRlbl9waWM=', 'dXB2b3RlX3lhZV9waWM=', 'dXB2b3RlX2tlcWlucV9waWM=', 'dXB2b3RlX2Zlcm5fcGlj', 'dXB2b3RlX3Rva2lfcGlj', 'dXB2b3RlX2RlbHRhX3BpYw==', 'dXB2b3RlX2dhbnl1c2Vnc19waWM=', 'dXB2b3RlX2thenVzZWdzX3BpYw==', 'dXB2b3RlX2F0YWdvX3BpYw==', 'dXB2b3RlX2ZyaWVyZW5fcGlj', 'RG93bnZvdGVfWWFlX2R5a2Vfc3R5bGU=', 'Y2F3Y2hhbl9LWVM=', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM3', 'c2JzYnNicw==', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM0', 'dXB2b3RlX2ludHJlcGlkX3BpY3M=', 'dXB2b3RlX2h1dGFvX3BpYw==', 'dXB2b3RlX2J1bm55X3BpYw==', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'cmlja3lvbmk=', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM2', 'dmh2Y3Z2dmI=', 'Zl9hZ2dvdHM=', 'U2FyYV9oZXRlcm8=', 'TGlzYV9oZXRlcm8=', 'TGlzYV9oZXRlcm8=', 'U2FyYV9oZXRlcm8=', 'QWxsSGV0ZXJvX2RpZV9mXzRfZw==', 'WWFlX2hldGVybw==', 'QmVpZG91X2hldGVybw==', 'Q2xvcmluZGVfaGV0ZXJv', 'S2VxaW5nX2hldGVybw==', 'UmFpZGVuX2hldGVybw==', 'R2V0Q29ycmVjdGlvbl9keWtlcw==', 'WWFlTWlrb19IRVRFUk8=', 'UmFpZGVuX3Nob2d1bl9IRVRFUk8=', 'R1JPU1NfRFlLRV9BUlRTVFlMRQ==', 'UmV0cmRlZEZfNGdfZ3Jvc3NfYXJ0aXN0', 'R1JPU1NfRFlLRV9TSElUX0RPV05WT1RF', 'aG9tb3NleHVhbGl0eURJU0VBU0U=', 'R1JPU1NfRFlLRV9QSUND', 'Zl9hZ2dvdHM=', 'UmV0cmRlZEY0X2dfZ3Jvc3NfYXJ0aXN0', 'Tm90RXZlblRhZ2dlZFl1cmk=', 'R1JPU1NfRFlLRV9TSElU', 'Zl9hZ2dvdHM=', 'ZG93dm90ZUdyb3NzZHlrZV95YWVfcGlj', 'ZG93dm90ZV9keWtlX3lhZV9waWM=', 'dXB2b3RlX3BpeW9fcGljcw==', 'ZG93bnZvdGVfbXVzY29sYXJfdG9raQ==', 'dXB2b3RlX3Jpb25fcGlj', 'dXB2b3RlX3N5bWJvbGlfcGlj', 'dXB2b3RlX3Jpb19waWMy', 'Zl9hZ2dvdHM=', 'dXB2b3RlX3l1dWthYW5kbm9hX3BpYw==', 'dXB2b3RlX3Jpb19waWM=', 'dXB2b3RlX25vYV9waWM=', 'dXB2b3RlX3dha2Ftb19waWM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'dXB2b3RlX2thcmluX3BpYw==', 'dXB2b3RlX2Z1cmluYV9waWM=', 'dnpmeHNz', 'eGJkYmRieg==', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMz', 'dXB2b3RlX2Frb2hpbmFfcGlj', 'dXB2b3RlX2FzdW5hX3BpYzM=', 'dXB2b3RlX2FzdW5hX3BpYzI=', 'dXB2b3RlX2FzdW5hX3BpYw==', 'dXB2b3RlX2x1bWliZV9waWMy', 'dXB2b3RlX2FzdW5hX3BpYw==', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'dXB2b3RlX2x1bWluZV9waWM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMz', 'eG5kYmNiZGI=', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM2', 'ZnJvY2k=', 'Zl9hZ2dvdHM=', 'dXB2b3RlX211dHN1a2lfcGljdHVyZQ==', 'dXB2b3RlX3NlZ3NfcGljdHVyZTI=', 'Zl9hZ2dvdHM=', 'bnpzbnNuc24=', 'dXB2b3RlX2dhbnl1X3BpYw==', 'dXB2b3RlX3Jpb19waWMz', 'dXB2b3RlX3Jpb19waWMy', 'dXB2b3RlX3Jpb19waWMx', 'dXB2b3RlX3Jpb19waWM=', 'dXB2b3RlX3NlZ3NfcGlj', 'dXB2b3RlX3Jpb19waWM=', 'dXB2b3RlX3Jpb19waWM=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'ZG5kbmRuYg==', 'Zl9hZ2dvdHM2', 'dmdmaGg=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'dXB2b3RlX3Jpb19waWM=', 'dXB2b3RlX3l1dWthX3BpYw==', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMz', 'Z2Z5Z2dn', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM3', 'eGh2eXVn', 'Zl9hZ2dvdHM=', 'dXB2b3RlX2F5YWthcGlj', 'dXB2b3RlX2thenVibG93cGlj', 'ZG93bnZvdGVfdHJhcF9mX2FnZ290cGlj', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHMy', 'dXB2b3RlX3Jpb19waWM=', 'Zl9hZ2dvdHM=', 'dXB2b3RlX3Jpb19waWM=', 'dXB2b3RlX2JpZ2Jvb2JhX3BpY3M=', 'ZG93bnZvdGVfZHlrZXNfcGljcw==', 'dXB2b3RlX2V1bGFfcGlj', 'dXB2b3RlX2thenVzYV9waWM=', 'dXB2b3RlX21peWFrb19waWN0dXJl', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM1', 'ZG5kbmRuYg==', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM4', 'ZG5kbmRuZA==', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM4', 'c2pkbm5k', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM4', 'Ymdmdmc3', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM2', 'dmZnZGNn', 'Zl9hZ2dvdHM=', 'dXB2b3RlX25vcm1hbGdlbnNoaW5fcGlj', 'dXB2b3RlX21ha2ltYV9waWM=', 'dXB2b3RlX2h1dGFvX3BpYw==', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'ZmFfZ19nb3RzMQ==', 'ZmFfZ19nb3Rz', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM4', 'c2pkYng=', 'Zl9hX2dnb3RzOA==', 'Zl9hX2dnb3RzNg==', 'Zl9hX2dnb3RzNQ==', 'Zl9hX2dnb3RzNA==', 'Zl9hX2dnb3RzMw==', 'Zl9hX2dnb3RzMg==', 'Zl9hX2dnb3RzMQ==', 'Zl9hX2dnb3Rz', 'Zl9hX2dnb3RzNw==', 'em5jYnNu', 'aGN1aHZn', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMz', 'eGJkYmRi', 'c2plamVq', 'Zl9hZ2dvdHMxMQ==', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHMxMg==', 'dXB2b3RlX25vYV9waWM=', 'dXB2b3RlX0hpbmF0YV9waWM=', 'dXB2b3RlX0JhX2JpZzZfcGlj', 'dXB2b3RlX3JhaWRlbmFuZFlhZV9waWM=', 'dXB2b3RlX2NlcmVzZmF1bmFfcGlj', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM3', 'ZG5kbmRudg==', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM4', 'ZGJkamVn', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM2', 'c25kanNqcw==', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM4', 'c2JzbnM=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM4', 'cmlja3lvbmk=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'dXB2b3RlX3JhaWRlbl9waWN0dXJl', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM4', 'ZnJrY2li', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'dXB2b3RlX2x1bWluZV9waWN0dXJl', 'dHJhbm5pZXM=', 'dHJhbm5pZXMx', 'dHJhbm5pZXMy', 'dHJhbm5pZXMz', 'dHJhbm5pZXM0', 'dHJhbm5pZXM1', 'Zl9hZ2dfb3RzNw==', 'Zl9hZ2dfb3RzOA==', 'cmlja3lvbmk=', 'Zl9hZ2dfb3RzNQ==', 'Zl9hZ2dfb3RzNA==', 'Zl9hZ2dfb3RzMw==', 'Zl9hZ2dfb3RzMg==', 'Zl9hZ2dfb3RzMQ==', 'Zl9hZ2dfb3Rz', 'Zl9hZ2dfb3RzNg==', 'dHJhbm5pZXM2', 'ZnJvY2lkaW1lcmRh', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM4', 'bWNubnhkbg==', 'emFiZGk=', 'Zl9hZ19nb3RzMTU=', 'Zl9hX2dnb3RzMTM=', 'Zl9hX2dnb3RzMTI=', 'Zl9hX2dnb3RzMTE=', 'Zl9hX2dnb3RzMTA=', 'Zl9hX2dnb3RzMTQ=', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'YW54bmM=', 'bnNkbmRuZG4=', 'YnVnZmZnZw==', 'dXB2b3RlX25vYV9waWM=', 'dXB2b3RlX2Frb19waWM=', 'dXB2b3RlX3JhaWRlbl9waWM=', 'YWx0b2xmb19ncm9zc19mX2FnZ290', 'bm90X3RhZ2dlZF95dXJpc2hpdA==', 'dXB2b3RlX21lZ3VtX3BpYw==', 'dXB2b3RlX3N0ZWxsZV9waWM=', 'dXB2b3RlX2x1bWluZV9waWM=', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM4', 'RXVsYV9Jc19IZXRlcm8=', 'QW1iZXJfSXNfSGV0ZXJv', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'VXB2b3RlS2F6dXNhUGlj', 'dXB2b3RlQnJlbVBhaXp1cmlQaWM=', 'd2l0aEJyZW1lcnRvbg==', 'ZG93bnZOaV9nZ2VycGlj', 'dXB2b3RlQnJlbVBpYw==', 'dXB2b3RlZW1vaml0aXRzcGlj', 'dXB2b3RlS2VxaW5xcGljdHVyZQ==', 'ZmFuZG9taXNjcmluZ2U=', 'Z2F5c2hpdEltcGFjdA==', 'bWF0dGhhOTk=', 'Zl9hZ2dvdHMxMg==', 'Zl9hZ2dvdHMxMQ==', 'Zl9hZ2dvdHMxMw==', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'bXJ3YXNoYWth', 'c3Rvcm1zY29ycGlvbg==', 'TmV3S2lk', 'Zmxvd2Vyc3hkZGQ=', 'U2lnbWV1ZA==', 'QWxleE9zaGlubw==', 'VGhlQ2FuYWRpYW5aZW4=', 'a25pZ2h0Z29sZXJt', 'WnlnYXJib2Rvcg==', 'R29qaXJhVGFuYWth', '6Zuq5pyI5Lmm6Z+1', 'Z29sZXJt', 'YWhzaHNpaWhpMzM=', 'c3RhcnNGcmlkYXk=', 'dGhlc3VwZXJjcmVlcA==', 'Tm85NjY5NzU=', 'bGl6emJldGgyOQ==', 'Tm8yNTM5', 'bmVrbzAx', 'emVyb190aGluZ3M=', 'Y1ljbG91VA==', 'bWFha3Vubg==', 'enRoaW5n', 'a2lycml0bzk5OA==', 'QUxJZ2h0RA==', 'eXVraTE1MjQ5OA==', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'YmJ5aGdm', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'dXB2b3RlRXVsYVBpY3R1cmU=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM3', 'dXB2b3RlX05vYV9QaWN0dXJlcw==', 'Z3Jvc3NfbmxnZ2Vycw==', 'dXB2b3RlX21peWFrb19waWN0dXJl', 'R3Jvc3NfTmxfZ2dlcnM=', 'QWxsX2dlbnNoaXRfY2hhcmFjdGVycw==', 'YXJlX2hldGVybw==', 'Y3J5X2ZfYWd6', 'R3Jvc3NfZGlrZV9hcnQ=', 'SHVUYW9fSXNfSGV0ZXJv', 'WWFuZmVpX0lzX0hldGVybw==', 'Z3Jvc3NfbmxnZ2VyczE=', 'Z3Jvc3NfbmxnZ2VyczI=', 'Z3Jvc3NfbmxnZ2VyczM=', 'RnV0YV9UcmFubnk=', 'Z3Jvc3NfbmxnZ2VyczQ=', 'Z3Jvc3NfbmxnZ2VyczU=', 'YWxsX2dlbnNoaXRfY2hhcmFjdGVycw==', 'R2V0X1JhcGVkX1N1bGV0dGE=', 'WWFlX2lzX0hldGVybw==', 'S2Fma2FfaXNfaGV0ZXJv', 'SGltZWtvX2lzX2hldGVybw==', 'WXVyaU1lbnRhbElsbG5lc3M=', 'WWFvaU1lbnRhbElsbG5lc3M=', 'RGllX05pZ19nZXJz', 'UmFpZGVuX2lzX0hldGVybw==', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'MTEzMDI5NQ==', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHMy', 'cmljY2hpb25l', 'd2pkYnpiem4=', 'TmFuYXNoaTk5', 'Zl9hZ2dvdHM=', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM5', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM4', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM3', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM2', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM1', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMxMA==', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM4', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM3', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM2', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM1', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM5', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'aG9tb3NleHVhbGl0eURpc2Vhc2Vfa3lz', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMxMQ==', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM0', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM5', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMxMQ==', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM3', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMxMA==', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM2', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM4', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM1', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM4', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM5', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM3', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM1', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM2', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM4', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM3', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM2', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM5', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM1', 'Zl9hZ2dvdHM=', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMxMA==', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM4', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM3', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM2', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM1', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM5', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM5', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMxMA==', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM3', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM2', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM1', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM4', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'YnVybkluX0hlbGxfUEVET19HUk9TUw==', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM2', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'R2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'R2V0X2NvcnJlY3Rpb25fZHlrZXM1', 'Y3JpbmdlX2ZfYWdnb3Rz', 'Zl80Z19GYW5kb20=', 'SG9ua2FpX2Z4Z19yYWls', 'ZGlzZ3VzdGluZ195dXJpX3NoaXQ=', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'amRkamVqZWo=', 'a3lzX2dheXNoaXRfc2hpcHBlcnM3', 'a3lzX2dheXNoaXRfc2hpcHBlcnM2', 'a3lzX2dheXNoaXRfc2hpcHBlcnM1', 'a3lzX2dheXNoaXRfc2hpcHBlcnM0', 'a3lzX2dheXNoaXRfc2hpcHBlcnMz', 'a3lzX2dheXNoaXRfc2hpcHBlcnMy', 'a3lzX2dheXNoaXRfc2hpcHBlcnMx', 'a3lzX2dheXNoaXRfc2hpcHBlcnM=', 'S2FxaW5nX2hldGVybw==', 'R2FueXVfaGV0ZXJv', 'R2F5c2hpdF9JbXBhY3RfY3Jpbmdl', 'ZGJzamp3', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMxMA==', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM1', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM2', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM3', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM4', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM5', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM2', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM3', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM4', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM5', 'QWdhaW5zdF9uYXR1cmU=', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM1', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM5', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM4', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM5', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM1', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM2', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM3', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMxMA==', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM1', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM2', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM3', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM4', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM5', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM0', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM1', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM2', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM3', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM4', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM5', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMxMA==', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMz', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMy', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXMx', 'Z2V0X2NvcnJlY3Rpb25fZHlrZXM=', 'bGVmdF9wcm9wYWdhbmRh', 'c2hpdF9hbmltZQ==', 'SG9tb3NleHVhbGl0eV9EaXNlc2U=', 'R2V0X2NvcnJlY3Rpb25fbGVzYml0Y2hz', 'bGdidF9wcm9wYWdhbmRh', 'ZDEzQXJ0aXN0T2ZUaGlzU2hpdA==', 'c2hpdF9hdXRob3I=', 'QWdhaW5zdF9OYXR1cmU=', 'Z2V0X3JhcGVk', 'c2pkYmRiZW4=', 'R1JPU1NfR1JPU1M=', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMxOQ==', 'Zl9hZ2dvdHMxOA==', 'Zl9hZ2dvdHMyMA==', 'Zl9hZ2dvdHMxNg==', 'Zl9hZ2dvdHMxNQ==', 'Zl9hZ2dvdHMxNA==', 'Zl9hZ2dvdHMxNw==', 'Zl9hZ2dvdHMxMg==', 'Zl9hZ2dvdHMxMQ==', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHMxMw==', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHMy', 'R0VUX0NPUlJFQ1RFRA==', 'ZGlzZ3VzdGluZ19mX2FnZ290cw==', 'ZGlzZ3VzdGluZ19keWtlX3BpY3R1cmU=', 'Zl9hZ2dvdHM=', 'amRqZGpkamI=', 'bWlzc2luZ195dXJpX3RhZw==', 'QnVybl9pbl9PdmVuc19GX2Fncw==', 'UmVwRHlrZXM=', 'SG9tb3NleHVhbGl0eV9NZW50YWxfaWxs', 'R0VUX0ZJWEVE', 'bGdidF9hZ2FpbnN0TmF0dXJl', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMxMQ==', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHMxMg==', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'SG9ua2FpX0ZfYWdfUmFpbA==', 'Zl9hZ2dvdHMz', 'R2V0X2NvcnJlY3Rpb24=', 'R0VUX0ZJWEVE', 'RGlzZ3VzdGluZ19keWtlX3BpY3R1cmU=', 'dHI0bm5pZXM=', 'cmFwZV9keWtlcw==', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM=', 'Zl9hZ3M=', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM2', 'empkaGRoZA==', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'ZGpkanJqZWo=', 'ZDEzRl9hZ3M=', 'R3Jvc3NfdHJhbm55X3NoaXQ=', 'TGdidF9EaXNlYXNl', 'bnNieGJj', 'ZGlzZ3VzdGluZ195dXJp', 'R0VUX0NPUlJFQ1RFRA==', 'Q0hLT05HTEFTU0RZS0VT', 'SG9ua2FpRl80R1NfQU5JTUFMUw==', 'SG95b3ZlcnNlRl9BR1M=', 'QWdhaW5zdF9uYXR1cmU=', 'SG9tb3NleHVhbGl0eV9EaXNlYXNl', 'ZHlrZXM=', 'R0VUX0NPUlJFQ1RJT04=', 'aW1wbGllZF95dXJp', 'bWlzc2luZ190aGVfdGFn', 'Z3Jvc3NfZHlrZV9waWN0dXJl', 'anNiZGJk', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHMxMA==', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM1', 'ZDEzX0ZfYWdnb3RzMw==', 'ZDEzX0ZfYWdnb3RzNA==', 'ZDEzX0ZfYWdnb3RzNQ==', 'R2F5c2hpdEltcGFjdFNISVQ=', 'ZDEzX0ZfYWdnb3Rz', 'ZDEzX0ZfYWdnb3RzMQ==', 'ZDEzX0ZfYWdnb3RzMg==', 'V2h5X2lzbnRfdGFnZ2VkX3l1cmk=', 'RGlzZ3VzdGluZ19mX2FnZ290cw==', 'ZDEzQWRtaW5z', 'RGlzZ3VzdGluZ19keWtlX3BpY3R1cmU=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHMy', 'RDEzQWRtaW5z', 'R2V0Q29ycmVjdGlvbg==', 'R2F5c2hpdEltcGFjdA==', 'bGdidERpc2Vhc2U=', 'ZGlzZ3VzdGluZ19mNF9nZ290cw==', 'd2h5X2lzbnRfdGFnZ2VkX3l1cmk=', 'ZGlzZ3VzdGluZ19keWtlX3BpY3R1cmU=', 'Zl9hZ2dvdHM=', 'Zl9hZ3M=', 'Zl9hZ3M=', 'Zl9hZ3Mx', 'Zl9hZ3M5', 'Zl9hZ3M3', 'Zl9hZ3M2', 'Zl9hZ3M1', 'Zl9hZ3M0', 'Zl9hZ3M4', 'Zl9hZ3My', 'Zl9hZ3Mz', 'Zl9hZ3M=', 'Zl9hZ3Mx', 'Zl9hZ3MxMA==', 'Zl9hZ3M4', 'Zl9hZ3M3', 'Zl9hZ3M2', 'Zl9hZ3M1', 'Zl9hZ3M5', 'Zl9hZ3Mz', 'Zl9hZ3My', 'Zl9hZ3Mx', 'Zl9hZ3M=', 'Zl9hZ3M0', 'Zl9hZ3M=', 'Zl9hZ3M=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM5', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHM=', 'bmlnYXM=', 'Zl9hZ3M=', 'bGVzYml0Y2hlcw==', 'UmFwZUR5a2Vz', 'QWdhaW5zdE5hdHVyZQ==', 'Z2V0Q09SUkVDVElPTg==', 'Z3Jvc3NfZHlrZV9waWN0dXJl', 'aHVoaGg=', 'Zl9hZ3M=', 'Zl9hZ3M=', 'Zl9hZ3M5', 'Zl9hZ3M3', 'Zl9hZ3M2', 'Zl9hZ3M1', 'Zl9hZ3M0', 'Zl9hZ3M4', 'Zl9hZ3My', 'Zl9hZ3Mx', 'Zl9hZ3M=', 'Zl9hZ3Mz', 'Zl9hZ3M=', 'Zl9hZ3M=', 'Zl9hZ3MxMA==', 'Zl9hZ3M4', 'Zl9hZ3M3', 'Zl9hZ3M2', 'Zl9hZ3M5', 'Zl9hZ3M0', 'Zl9hZ3Mz', 'Zl9hZ3My', 'Zl9hZ3Mx', 'Zl9hZ3M1', 'Zl9hZ3M=', 'Zl9hZ3M=', 'Zl9hZ2dvdHM4', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM0', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHM3', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM=', 'bl9pZ2dlcg==', 'R0VUX0NPUlJFQ1RJT05fRFlLRVM=', 'eXVyaV9hZ2FpbnN0TmF0dXJl', 'QkVGT1JFX0FQUFJPVklORw==', 'RElTR1VTVElOR19GX0FHR09UUw==', 'R1JPU1NfRFlLRV9QSUNUVVJF', 'QUREX1RIRV9UQUdT', 'ZmFfZ3Mx', 'ZmFfZ3M=', 'ZmFfZ3My', 'ZmFfZ3M=', 'ZmFfZ3MxMA==', 'ZmFfZ3M4', 'ZmFfZ3M3', 'ZmFfZ3M2', 'ZmFfZ3M1', 'ZmFfZ3M5', 'ZmFfZ3Mz', 'ZmFfZ3My', 'ZmFfZ3Mx', 'ZmFfZ3M=', 'ZmFfZ3M0', 'ZmFfZ3M=', 'YWRkX3RoZV90YWdz', 'eW91X2Rpc2d1c3Rpbmc=', 'ZGlzZ3VzdGluZ19keWtlX3BpY3R1cmVz', 'ZGlzZ3VzdGluZ19keWtlX3BpY3R1cmVz', 'a3lzX2FkZF90aGVfdGFncw==', 'Zl9hZ3Mx', 'R3Jvc3NfbGVzYml0Y2hlcw==', 'cmFwRHlrZXM=', 'R2V0X2NvcnJlY3RlZA==', 'eW91X2Rpc2d1c3Rpbmc=', 'YWRkX3RoZV90YWdz', 'ZGlzZ3VzdGluZ19keWtlX3BpY3R1cmVz', 'ZmFfZ2E=', 'Zl9hZ2dvdHM=', 'bl9pZ2dlcnM4', 'bl9pZ2dlcnM5', 'bl9pZ2dlcnM2', 'bl9pZ2dlcnM1', 'bl9pZ2dlcnM0', 'bl9pZ2dlcnMz', 'bl9pZ2dlcnMy', 'bl9pZ2dlcnM3', 'bl9pZ2dlcnM=', 'bl9pZ2dlcnMx', 'bl9pZ2dlcnM=', 'Rl9hZ3M=', 'bGdidGRpc2Vhc2U=', 'Z2V0X2NvcnJlY3RlZA==', 'eW91X2Rpc2d1c3Rpbmc=', 'Zl9hZ2dvdHM=', 'eXVyaV9EaXNlYXNl', 'Z3Jvc3NfZHlrZV9waWN0dXJlcw==', 'YWRkX3RoZV90YWdz', 'ZmFfZ3M4', 'ZmFfZ3M5', 'ZmFfZ3M2', 'ZmFfZ3M1', 'ZmFfZ3M0', 'ZmFfZ3Mz', 'ZmFfZ3My', 'ZmFfZ3M3', 'ZmFfZ3M=', 'ZmFfZ3Mx', 'ZmFfZ3M=', 'ZmFfZ3M=', 'bl9pZ2dlcnM=', 'eGp4amRq', 'ZmFfZ3M=', 'Zl9hZ2dvdHM1', 'Zl9hZ2dvdHM2', 'Zl9hZ2dvdHMz', 'Zl9hZ2dvdHMy', 'Zl9hZ2dvdHMx', 'Zl9hZ2dvdHM=', 'Zl9hZ2dvdHM0', 'THVtaW5lX2hldGVybw==', 'ZGllX2ZfYWdz', 'Z3h5c2hpdEltcGFjdA==', 'QXlha2FfaGV0ZXJv', 'QXlha2FfaGV0ZXJv', 'dGFnX3lvdV9kaXNndXN0aW5n', 'YWRkX3RoZV9jb3JyZWN0', 'WVVSSV9TSElU', 'Z3Jvc3NfZHlrZQ==', 'bl9pZ2dlcg==', 'Zl9hZ2dvdA==', 'MWZhX2dz', 'ZmFfZ3M=', 'ZmFfZ3MxMA==', 'ZmFfZ3M5', 'ZmFfZ3M4', 'ZmFfZ3M3', 'ZmFfZ3M2', 'ZmFfZ3M1', 'ZmFfZ3M0', 'ZmFfZ3Mz', 'ZmFfZ3My', 'ZmFfZ3Mx', 'ZmFfZ3M=', 'ZmFfZ3M0', 'ZmFfZ3M1', 'ZmFfZ3My', 'ZmFfZ3Mx', 'ZmFfZ3M=', 'ZmFfZ3Mz', 'ZmFfZ3M5', 'ZmFfZ3M4', 'ZmFfZ3MxMA==', 'ZmFfZ3M2', 'ZmFfZ3M1', 'ZmFfZ3M0', 'ZmFfZ3Mz', 'ZmFfZ3M3', 'ZmFfZ3Mx', 'ZmFfZ3M=', 'ZmFfZ3My', 'bjFnZ2E=', 'ZmFfZ3M=', 'ZmFfZ3M=', 'ZmFfZ3M2', 'ZmFfZ3M3', 'ZmFfZ3M4', 'ZmFfZ3My', 'ZmFfZ3Mz', 'ZmFfZ3M0', 'ZmFfZ3M1', 'ZmFfZ3M=', 'ZmFfZ3Mx', 'ZmFfZ3M=', 'ZnhnZ290cw==', 'Zl80X2dzNQ==', 'Zl80X2dzNA==', 'Zl80X2dzMw==', 'Zl80X2dzMg==', 'Zl80X2dzMQ==', 'Zl80X2dz', 'bjFnX2dlcnM=', 'Zl80X2dz', 'Zl80X2dzMQ==', 'Zl80X2dzMg==', 'Zl80X2dzMw==', 'Zl80X2dzNA==', 'Zl80X2dzNQ==', 'Zl80X2dzNg==', 'Zl80X2dzNw==', 'Zl80X2dzOA==', 'Zl80X2dzOQ==', 'Zl80X2dzMTA=', 'cGJmeQ==', 'Znhncw==', 'Z3Jvc3NfYmxhY2t3YXNoaW5n', 'Q2hpa2FfSGV0ZXJv', 'UmFwZV9keWtlcw==', 'bmlnZ3Y=', 'Q2hpa2FfSGV0ZXJv', 'R3Jvc3NfYmxhY2t3YXNoaW5n', 'SGF5YXNha2FfSGV0ZXJv', 'ZmFfZ19z', 'bl8xX2dnX2Vycw==', 'Z3Jvc3NfYmxhY2t3YXNoaW5n', 'Zm9nZ290', 'bmlja2hlcg==', 'Zl80Z3M=', 'cmVwTGVzYml0Y2hlcw==', 'bGdidE1lbnRhbElsbG5lc3M=', 'Z2V0Y29ycmVjdGVk', 'Zl80X2c=', 'Y2hrU2hpdHR5QXV0aG9y', 'Y2hpa2FfaGV0ZXJv', 'aGF5YXNha2FfaGV0ZXJv', 'Z3Jvc3NfZHlrZV9waWN0dXJl', 'YW54bmNu', 'bmlnYmFz', 'Zm9nZ290cw==', 'Zl80X2dzOA==', 'Zl80X2dzOQ==', 'Zl80X2dzMTA=', 'Zl80X2dzMw==', 'Zl80X2dzNA==', 'Zl80X2dzNQ==', 'Zl80X2dzNg==', 'Zl80X2dzNw==', 'Zl80X2dz', 'Zl80X2dzMQ==', 'Zl80X2dzMg==', 'cmFwRHlrZXM=', 'Zl80X2dz', 'Z2V0Q29ycmVjdGVk', 'cmFwZWxlc2I=', 'WVVSSV9TSElU', 'ZGlzZ3VzdGluZ19keWtlcw==', 'Z3Jvc3NfZHlrZV9waWN0dXJl', 'Rm9nZ290cw==', 'Zm9nZ290czM=', 'Zm9nZ290cw==', 'ZjRfZ19nb3Rz', 'ZjRfZ2dfb3RzMQ==', 'ZjRfZ2dfb3RzMg==', 'ZjRfZ2dfb3RzNA==', 'ZjRfZ2dfb3RzNQ==', 'ZjRfZ2dfb3RzMw==', 'ZjRfZ2dfb3Rz', 'Zm9nZ290cw==', 'Zm9nZ290cw==', 'Zm9nZ290cw==', 'Zm9nZ290cw==', 'ZmFfZ2dfb3RzNw==', 'ZmFfZ2dfb3RzMQ==', 'ZmFfZ2dfb3RzMg==', 'ZmFfZ2dfb3RzMw==', 'ZmFfZ2dfb3RzNA==', 'ZmFfZ2dfb3RzNQ==', 'ZmFfZ2dfb3RzNg==', 'ZmFfZ2dfb3Rz', 'Zm9nZ290cw==', 'bmliYmVycw==', 'Zm9nZ290cw==', 'bmlfZ2dlcnM=', 'bl9pZ2dlcg==', 'ZnhnZzB0cw==', 'c2VlX3RoYXRfZnhnX3NoaXQ=', 'Z3Jvc3NfZHlrZV9waWN0dXJl', 'ZGllR2Vuc2hpdEZhbmRvbQ==', 'aHV0YW9faGV0ZXJv', 'ZjRfZ3M1', 'ZjRfZ3M0', 'ZjRfZ3Mz', 'ZjRfZ3My', 'ZjRfZ3M=', 'ZnhnZ290czg=', 'ZnhnZ290czc=', 'ZnhnZ290czY=', 'ZnhnZ290czU=', 'ZnhnZ290czM=', 'ZnhnZ290czI=', 'ZnhnZ290czE=', 'Zm9nZ290cw==', 'Zm9nZ290cw==', 'QnVybkluT3ZlbnM=', 'aV9kb250X3dhbnRfdG8=', 'YWRkX3l1cmlfdGFncw==', 'R3h5c2hpdEltcGFjdENyaW5nZQ==', 'eWFuZmVpX2hldGVybw==', 'ZnFnZ290cw==', 'Zm9nZ290cw==', 'ZjRfZ3Mx', 'bmlnX2dhcw==', 'ZjRfYnM=', 'ZjRfZ3M2', 'ZjRfZ3Mx', 'bjFnX2dlcg==', 'bjFnZzNycw==', 'ZnhnZ290czk=', 'ZnhnZ290czQ=', 'ZnhnZ290cw==', 'ZjRfZ3M=', 'bmlnZzQ=', 'ZjRfZ3M=', 'ZmFiYm90cw==', 'bG9zZXJz', 'cmViYXJkcw==', 'UjNUQVJERURfc2l0ZQ==', 'RjRfR19HT1RT', 'R2F5c2hpdEltcGFjdEY0X0dz', 'eXVyaV9EaXNlYXNl', 'a2VxaW5xX2hldGVybw==', 'R2FueXVfaGV0ZXJv', 'Z3Jvc3NfZHlrZV9waWN0dXJl', 'YWRnbmJ1', 'YmZqdmhiYmI=', 'ZmFfZ3M=', 'dmhqYmdo', 'cWJheGI=', 'c2hpdHNpdGU=', 'ZjRfZ3M=', 'bmlnZzQ=', 'ZjRfZ3M=', 'ZjRfZ2dvdA==', 'ZjRfZ2dvdA==', 'Zl80Z2dvdHM=', 'ZjRfZ2dvdHM=', 'YWJ6Yg==', 'QXJjYW5lNTVfTG9zZXIx', 'YmJnZ2h1', 'bnNkaGRoZGo=', 'ZjRfZ3Nzc3M=', 'bm9uYW1lX2Y0X2c1', 'bm9uYW1lX2Y0X2c2', 'bm9uYW1lX2Y0X2c3', 'bm9uYW1lX2Y0X2c4', 'bm9uYW1lX2Y0X2c=', 'bm9uYW1lX2Y0X2cx', 'bm9uYW1lX2Y0X2cy', 'bm9uYW1lX2Y0X2cz', 'bm9uYW1lX2Y0X2c0', 'bmlfZ2czcnM=', 'Zm9fZ2dvdA==', 'ZmdnNjU=', 'YXJjYW5lNTVfRjRCR09U', 'WmViODk=', 'SzFsbHl1cmlmYW5z', 'Y29wZV9mNF9n', 'bWF6bng=', 'QXJjYW5lNTVfZmFnXzB0NQ==', 'QXJjYW5lNTVfZmFnXzB0NA==', 'QXJjYW5lNTVfZmFnXzB0', 'QXJjYW5lNTVfZmFnXzB0Mg==', 'QXJjYW5lNTVfZmFnXzB0MQ==', 'QXJjYW5lNTVfZmFnXzB0Mw==', 'QXJjYW5lNTVfY2xvd24=', 'U2hlX2lzX25vcm1hbA==', 'Y29wZV9hbmRfY3J5', 'QXJjYW5lNTVfTG9zZXI=', 'RjRHU19OT1RQRU9QTEU=', 'cGllY2VvZHRyYWFo', 'QXJjYW5hNTVfQVNTSE9MRQ==', 'QXJjYW5hNTVfUkVUQVJERUQ=', 'QXJjYW5lNTVfUkVUQVJERUQ=', 'QXJjYW5lNTVfSVNfU0hJVA==', 'UmFpc2luZ0tfQVNTSE9MRQ==', 'UmFpc2luZ0tfRjRH', 'UmFpc2luZ0tfUkVUQVJERUQ=', 'UmFpc2luZ0tfSVNfU0hJVA==', 'QXJjYW5lNTVfUkVUQVJERUQy', 'QXJjYW5lNTVfSVNfU0hJVDI=', 'bm9uYW1ldGhhbmtzX0lTX1NISVQ=', 'bm9uYW1ldGhhbmtzX0FTU0hPTEU=', 'bm9uYW1ldGhhbmtzX2lzX3NoaXQx', 'bm9uYW1ldGhhbmtzX1JFVEFSREVE', 'bm9uYW1ldGhhbmtzX3JldGFyZGVkMg==', 'bm9uYW1ldGhhbmtzX2Fzc2hvbDM=', 'bm9uYW1ldGhhbmtzX2Y0Z18wdA==', 'bm9uYW1ldGhhbmtzX2Y0Z18wdDE=', 'bm9uYW1ldGhhbmtzX2Y0Z18wdDI=', 'bm9uYW1ldGhhbmtzX2Y0Z18wdDM=', 'bm9uYW1ldGhhbmtzX2Y0Z18wdDQ=', 'bm9uYW1ldGhhbmtzX2Y0Z18wdDU=', 'cmFwZWxlc2I=', 'RzRZU0hJVF9JTVBBQ1Q=', 'QXJjYW5hNTVfRjRHX1JFVEFSRA==', 'V2h5X2hlX3Nob3VsZA==', 'TWFrZV9oZXJfYV9keWtl', 'U1RGVV9ESVNHVVNUSU5H', 'RElTR1VTVElOR19GNEc=', 'RFlLRV9GRVRJU0hJU1RfV0VJUkRP', 'QXJjYW5hNTVfS1lT', 'RlVDS0lOR19DTE9XTl9TSUNL', 'ZGllX0FyY2FuYTU1', 'UmlvX0lzbm90X2xlc2JpdGNoX2R5a2U=', 'aXNoaW5hc2hpX0FTU0hPTEU=', 'aXNoaW5hc2hpX1JFVEFSREVE', 'aXNoaW5hc2hpX1JFVEFSREVEMg==', 'aXNoaW5hc2hpX0lTX1NISVQ=', 'TmlnZ19lcnVuZGF5bw==', 'bmlnZzRzc3Nz', 'TDNzYml0Y2hlc05vdFBwbA==', 'bmlfZ2czcg==', 'VHJhc2hTaXQz', 'Z3Jvc3NkeWtlY3JpbmdlcGlj', 'ZHlrZVNISVRQSUNUVVJF', 'ZjRneno=', 'Z3Jvc3NBZ3NpbnN0TmF0dXJl', 'R3Jvc3NZdXJpU2hpdA==', 'WW91TG9zdA==', 'VHJ5YWdhaW5CSVRDSA==', 'RjRnZ19vdHo=', 'UmFpc2luZ0tHQVJCQUdFRjRH', 'UmFpc2luZ0tfRjRHR18wVA==', 'UmFpc2luZ0tfZ2FyYmFnZQ==', 'R2FyYmFnZU1vZHM=', 'R2FyYmFnZUFkbWlucw==', 'R2FyYmFnZVNpdGU=', 'bmlmZmFz', 'VFJBTk5Z', 'RkdHT1RT', 'WVVSSV9TSElUSA==', 'ZHlrZUJJVFhHRVM=', 'Rl9HR09UUw==', 'c2hpdHNpdGUx', 'ZjRnZzBfdHM=', 'RjRHU3p6eg==', 'dHJhbm5pZXM=', 'RjRfR0dPVFNfRFlLRVM=', 'bmlnZzNy', 'RmF0TG9zZXJz', 'UmV0YXJkQWRtaW5z', 'VFJBTk5JRVMx', 'RFlLRTI=', 'Rl9BX0dHT1Q=', 'aVNheVdoYXRJV2FudA==', 'RkFHX0FETUlOUw==', 'SG9ua2FpRjRHUmFpbA==', 'WVVSSV9TSElU', 'SHdvcmRBR0FJTlNUTkFUVVJF', 'TEdCVF9NRU5UQUxfSUxMTkVTUw==', 'ZjRnYWRtaW5z', 'Z2d1bmNoaA==', 'YmhuZnVoZ2c=', 'aHNoc2pkamQ=', 'YW5kYmRi', 'YWpzYmRq', 'ZGtmampmag==', 'c2hpdHNpdGU=', 'ZnVoZ2ZmZ2do', 'cmVfdGFyZA==', 'Zmdncw==', 'bmlnZzRzcw==', 'bmlnZzQ=', 'c2hpdF9hZG1pbnM=', 'Z3Jvc3NUUkFOTllwaWM=', 'bmlnZzNycw==', 'ZjRnc2dncw==', 'RjRnc3Nzc3Nz', 'ZjRnc3Nzcw==', 'ZjRnZ3Nncw==', 'ZjRnc3Nzc3M=', 'ZjRnZ3M=', 'ZjRnc3M=', 'ZjRncw==', 'ZjRncw==', 'ZjRncw==', 'bjFnX2dlcnM=', 'ZjRnYml0Y2hlcw==', 'MTA3NjA4Ng==', 'ZjRnYnM=', 'ZjRnZ2dzc3Nz', 'ZjRnZ3Nzc3M=', 'ZjRnc3Nzcw==', 'ZjRnc3Nz', 'ZjRnc3M=', 'ZjRncw==', 'ZjRncw==', 'ZHlrZXNSZWlw', 'SFdvcmRESVNFQVNF', 'ZjRnc3M=', 'ZjRncw==', 'Z3Jvc3NEeWtlU2hpdA==', 'ZjRncw==', 'ZjRncmV0YXJk', 'MTA3NTE5Mw==', 'Y2RqbmJnaA==', 'amRkamRqZGo=', 'aGRkamRqamQ=', 'aXNoaW5hc2hpMTIx', 'amRzanNq', 'Z3Jvc3NmNGdz', 'aXNoaW5hc2hpMTIw', 'ZjRnc3M=', 'aXNoaW5hc2hpMTE5', 'aXNoaW5hc2hpMTE4', 'aXNoaW5hc2hpMTE3', 'aXNoaW5hc2hpMTE2', 'aXNoaW5hc2hpMTE1', 'aXNoaW5hc2hpMTE0', 'eXVyaVNoaXRWdHViZXJzU0hJVA==', 'aXNoaW5hc2hpMTEz', 'aXNoaW5hc2hpMTEy', 'aXNoaW5hc2hpMTEx', 'aXNoaW5hc2hpMTEw', 'aXNoaW5hc2hpMTA5', 'aXNoaW5hc2hpMTA4', 'MTA3MjI5Mw==', 'SG9ua2FpZjRncmFpbFNISVQ=', 'aXNoaW5hc2hpMTA3', 'MTA3MjEwMQ==', 'aXNoaW5hc2hpMTA2', 'aXNoaW5hc2hpMTA1', 'cHJpbmNlc3NTSElU', 'aXNoaW5hc2hpMTA0', 'MTA3MTcxNA==', 'aXNoaW5hc2hpMTAz', 'aXNoaW5hc2hpMTAy', 'aXNoaW5hc2hpMTAx', 'aXNoaW5hc2hpMTAw', 'Zl9hZ2dvdHM=', 'bGdidF9EaXNlYXNl', 'SG9ua2FpU2hpdFJhaWw=', 'SG9ua2FpRl80R19yYWls', 'WXVyaUdyb3Nz', 'S2xhZmthSXNIZXRlcm8=', 'SGltZWtvSXNIZXRlcm8=', 'aXNoaW5hc2hpOTk=', 'MTA3MTE3OA==', 'MTA3MTIyNg==', 'MTA3MTI2NA==', 'aXNoaW5hc2hpOTg=', 'aXNoaW5hc2hpOTc=', 'aXNoaW5hc2hpOTY=', 'MTA3MTAzMw==', 'MTA3MTAxNQ==', 'aXNoaW5hc2hpOTU=', 'aXNoaW5hc2hpOTQ=', 'ZjRnZ18wdHM=', 'a3lzZjRncw==', 'aXNoaW5hc2hpOTM=', 'aXNoaW5hc2hpOTI=', 'aXNoaW5hc2hpOTE=', 'MTA3MDM0NA==', 'ZGllaG9ua2FpcGxheWVycw==', 'eXVyaWRpc2Vhc2U=', 'ZGllZHVrZXM=', 'ZjRnX2cwdHM=', 'R3Jvc3NkeWtlcw==', 'ZGllZHlrZXM=', 'R3Jvc3NkeWtlcw==', 'aGR5aGdn', 'aXNoaW5hc2hpOTA=', 'a3lzZjRncw==', 'aXNoaW5hc2hpODk=', 'MTA3MDI1OA==', 'aXNoaW5hc2hpODc=', 'MTA3MDIwMw==', 'aXNoaW5hc2hpODY=', 'aXNoaW5hc2hpODU=', 'aXNoaW5hc2hpODQ=', 'aXNoaW5hc2hpODM=', 'MTA2OTkxOA==', 'aXNoaW5hc2hpODI=', 'MTA2OTgyNQ==', 'aXNoaW5hc2hpODE=', 'MTA2OTc5MA==', 'MTA2OTc5NQ==', 'aXNoaW5hc2hpODA=', 'aXNoaW5hc2hpNzk=', 'aXNoaW5hc2hpNzg=', 'aXNoaW5hc2hpNzc=', 'aXNoaW5hc2hpNzY=', 'aXNoaW5hc2hpNzU=', 'aXNoaW5hc2hpNzQ=', 'aXNoaW5hc2hpNzM=', 'YXZidnpi', 'TmFtZU5hbWVoc2g=', 'YWpzYng=', 'c25kYmRq', 'YWpzampzanM=', 'aXNoaW5hc2hpNzI=', 'aXNoaW5hc2hpNzE=', 'SXNoaW5hc2hpNzA=', 'SXNoaW5hc2hpNjk=', 'MTA2ODgwMg==', 'aXNoaW5hc2hpNjg=', 'aXNoaW5hc2hpNjc=', 'aXNoaW5hc2hpNjY=', 'Zmdnb3Jz', 'Zmdnb3Rz', 'ZHlrZXM=', 'aXNoaW5hc2hpNjU=', 'aXNoaW5hc2hpNjQ=', 'MTA2ODY4OQ==', 'MTA2ODYzNQ==', 'MTA2ODY1Mw==', 'aXNoaW5hc2hpNjI=', 'c2hpdHNpdGU=', 'QUE=', 'cWhzbnM=', 'aGZleQ==', 'amRoZGpmaA==', 'MTA2NzUyMQ==', 'eGpkamRqamQ=', 'MTA2ODE3MA==', 'YWpzamRqZWo=', 'aGFoc2hzZA==', 'QXNkYg==', 'YWp4Yg==', 'MTA2ODM3OQ==', 'MTA2ODM4MA==', 'YW54aHg=', 'ZGpzamRqYg==', 'YXNneA==', 'MTA2NzkwMg==', 'YWJ4Yg==', 'YXNoeGI=', 'SXNoaW5hc2hpMjg=', 'aXNoaW5hc2hpMjk=', 'aXNoaW5hc2hpMzA=', 'SXNoaW5hc2hpMzE=', 'SXNoaW5hc2hpMzI=', 'aXNoaW5hc2hpMzM=', 'aXNoaW5hc2hpMzQ=', 'SXNoaW5hc2hpMzU=', 'SXNoaW5hc2hpMzY=', 'SXNoaW5hc2hpMzc=', 'aXNoaW5hc2hpMzg=', 'SXNoaW5hc2hpMzk=', 'aXNoaW5hc2hpNDA=', 'aXNoaW5hc2hpNDE=', 'aXNoaW5hc2hpNDI=', 'aXNoaW5hc2hpNDM=', 'aXNoaW5hc2hpNDQ=', 'aXNoaW5hc2hpNDU=', 'aXNoaW5hc2hpNDY=', 'aXNoaW5hc2hpNDc=', 'aXNoaW5hc2hpNDg=', 'aXNoaW5hc2hpNDk=', 'aXNoaW5hc2hpNTA=', 'aXNoaW5hc2hpNTE=', 'aXNoaW5hc2hpNTI=', 'eGpkamRqamQ=', 'MTA2NzUyMQ==', 'cWhzbnM=', 'aGZleQ==', 'amRoZGpmaA==', 'MTA2ODE3MA==', 'YWpzamRqZWo=', 'aGFoc2hzZA==', 'QXNkYg==', 'YWp4Yg==', 'MTA2ODM3OQ==', 'MTA2ODM4MA==', 'YW54aHg=', 'ZGpzamRqYg==', 'YXNneA==', 'MTA2NzkwMg==', 'YWJ4Yg==', 'YXNoeGI=', 'SXNoaW5hc2hpMjg=', 'aXNoaW5hc2hpMjk=', 'aXNoaW5hc2hpMzA=', 'SXNoaW5hc2hpMzE=', 'SXNoaW5hc2hpMzI=', 'aXNoaW5hc2hpMzM=', 'aXNoaW5hc2hpMzQ=', 'SXNoaW5hc2hpMzU=', 'SXNoaW5hc2hpMzY=', 'SXNoaW5hc2hpMzc=', 'aXNoaW5hc2hpMzg=', 'SXNoaW5hc2hpMzk=', 'aXNoaW5hc2hpNDA=', 'aXNoaW5hc2hpNDE=', 'aXNoaW5hc2hpNDI=', 'aXNoaW5hc2hpNDM=', 'aXNoaW5hc2hpNDQ=', 'aXNoaW5hc2hpNDU=', 'aXNoaW5hc2hpNDY=', 'aXNoaW5hc2hpNDc=', 'aXNoaW5hc2hpNDg=', 'aXNoaW5hc2hpNDk=', 'aXNoaW5hc2hpNTA=', 'aXNoaW5hc2hpNTE=', 'aXNoaW5hc2hpNTI=', 'aXNoaW5hc2hpNTM=', 'aXNoaW5hc2hpNTU=', 'aXNoaW5hc2hpNTY=', 'aXNoaW5hc2hpNTc=', 'aXNoaW5hc2hpNTg=', 'SXNoaW5hc2hpNTk=', 'aXNoaW5hc2hpNjA=', 'YWpzamRqZWo=', 'aXNoaW5hc2hpNjA=', 'QXNkYg==', 'YWp4Yg==', 'ZmFfZ3JldGFyZA==', 'Zl9hZ2dyb3NzZmFuZG9t', 'SXNoaW5hc2hpNTk=', 'aXNoaW5hc2hpNTg=', 'aXNoaW5hc2hpNTc=', 'aXNoaW5hc2hpNTY=', 'aXNoaW5hc2hpNTU=', 'aXNoaW5hc2hpNTM=', 'aXNoaW5hc2hpNTI=', 'aXNoaW5hc2hpNTE=', 'aXNoaW5hc2hpNTA=', 'aXNoaW5hc2hpNDk=', 'aXNoaW5hc2hpNDg=', 'YXNoeGI=', 'YWJ4Yg==', 'aXNoaW5hc2hpNDY=', 'YXNneA==', 'YW54aHg=', 'eGpkamRqamQ=', 'MTA2NzkwMg==', 'aXNoaW5hc2hpNDU=', 'aXNoaW5hc2hpNDQ=', 'aXNoaW5hc2hpNDM=', 'ZGpzamRqYg==', 'aXNoaW5hc2hpNDI=', 'aXNoaW5hc2hpNDE=', 'MTA2NzUyMQ==', 'aXNoaW5hc2hpNDA=', 'SXNoaW5hc2hpMzk=', 'aXNoaW5hc2hpMzg=', 'SXNoaW5hc2hpMzc=', 'amRoZGpmaA==', 'aGZleQ==', 'cWhzbnM=', 'SXNoaW5hc2hpMzY=', 'SXNoaW5hc2hpMzU=', 'aXNoaW5hc2hpMzQ=', 'aXNoaW5hc2hpMzM=', 'SXNoaW5hc2hpMzI=', 'SXNoaW5hc2hpMzE=', 'aXNoaW5hc2hpMzA=', 'aXNoaW5hc2hpMjk=', 'SXNoaW5hc2hpMjg=', 'aXNoaW5hc2hpMjc=', 'aXNoaW5hc2hpMjY=', 'aXNoaW5hc2hpMjU=', 'aXNoaW5hc2hpMjQ=', 'aXNoaW5hc2hpMjM=', 'SXNoaW5hc2hpMjI=', 'aXNoaW5hc2hpMjE=', 'SXNoaW5hc2hpMjA=', 'SXNoaW5hc2hpMTk=', 'bmlnZzNycw==', 'SXNoaW5hc2hpMTg=', 'SXNoaW5hc2hpMTc=', 'SXNoaW5hc2hpMTY=', 'SXNoaW5hc2hpMTQ=', 'SXNoaW5hc2hpMTI=', 'aXNoaW5hc2hpMTE=', 'SXNoaW5hc2hpOQ==', 'aXNoaW5hc2hpOA==', 'SXNoaW5hc2hpNw==', 'SXNoaW5hc2hpNg==', 'SXNoaW5hc2hpNQ==', 'SXNoaW5hc2hpNA==', 'SXNoaW5hc2hpMw==', 'SXNoaW5hc2hpMg==', 'SXNoaW5hc2hpMQ==', 'SXNoaW5hc2g=', 'R2FyYmFnZXNpdGVLX3lzQWRtaW5z', 'ZHllZjRnZzB0cw==', 'ZHllZjRnZzB0czI=', 'ZHllZjRnZzB0czE=', 'ZHllZjRncw==', 'S19ZU0Y0R0cwVFM=', 'ZGhkaGRqZA==', 'YXNoeGg=', 'bWFieA==', 'bWhhbnoyOA==', 'a3l6ZjRncw==']
                },
                {
                    ids:[492559,1229050, 1228971, 1228959, 1228942],
                    usernames:['Q29wcm9saXRl','Rm9ybG9ybl9Ib3Bl', 'VGltZXRvUmVkZWVtTXlzZWxm', 'VHJ1ZUtyaW5nZV9Tb2Nr', 'U29ja3Byb2xpdGU=']
                },
                {
                    ids:[1218601, 1247789, 1247563, 1247557, 1247424, 1247377, 1247388, 1247390, 1247379, 1247420, 1228858, 1228859, 1228863, 1228862, 1246938, 1246937, 1246936, 1246935, 1227352, 1228857, 1246427, 1228856, 1240282, 1222882, 1227185, 1227176, 1227174, 1227170, 1220093, 1227107, 1220330, 1220327, 1220090, 1219944, 917538, 916512, 1219541, 1219472, 1219454, 1219420],
                    usernames:['Y29heGNvZg==', 'eGF4YXhhaGE=', 'YXV1MTU5', 'bW9kc2FyZWRpY2toZWFkcw==', 'ZnVja3lvdXVuYnJlYWthYmxl', 'YmFyb25xaQ==', 'ZWphYzE0', 'cHBhbWlh', 'a2FyYXNtYQ==', 'ZnVja2JpdGNobW9kcw==', 'aGFyYW1ib24=', 'bmFtYWRh', 'YXJhbmFz', 'cmVjdXB0b3I=', 'emFvemFjaA==', 'cmVkc3VwYQ==', 'c29rb25vemk=', 'Z2VlbWFuMA==', 'SU04MTk=', 'SExUMTY=', 'bWV5b21pYQ==', 'aGFtY29u', 'dmlyaW9hcw==', 'QUtBNzc=', 'ZWxlY3Bybw==', 'NnNvbGlkc25ha2U5', 'YW1hbmRhbWE=', 'YWdhcmE=', 'dHVsdGFtYQ==', 'bm9va2FjdWxh', 'c29uaWFwYXQ=', 'bmFyYWRhZGE=', 'd3lhdHR6YWJp', 'bm9sYW5tYW4=', 'UGFuemVyVGlnZXI=', 'U25uZXNoZXI=', 'ZXl0cmFvbWU=', 'c2FtYXJvdHU=', 'emFsYWNvYQ==', 'dG9ycmVkb20=']
                },
                {
                    ids:[965798, 1084903, 1084701, 1084639, 1084507, 1084343, 1083827, 1083230, 1083078, 1082715, 1082015, 1081670, 1080486, 1080368, 1079548, 1078953, 1078905, 1078904, 1078903, 1078900, 1078744, 1078890, 1078677, 1078614, 1077574, 1077054, 1076925, 1076860, 1076563, 1076415, 1076513, 1075877, 1075565, 1075539, 1074973, 1074981, 1074750, 1074663, 1074353, 1074308, 1074100, 1073954, 1073743, 1073701, 1073534, 1073313, 1073231, 1073165, 1073022, 1072981, 1072966, 1072789, 1072205, 1071412, 1071162, 1071011, 1070974, 1070470, 1069960, 1069874, 1069826, 1069608, 1069601, 1069492, 1069204, 1069216, 1065373, 1062378, 1047119, 1044194, 1043622, 1042796, 1040897, 1040393, 1039997, 1038401, 1038049, 1037711, 1037213, 1037133, 1033451, 1026646, 1026667, 1026664, 926787, 925874, 1026344, 1084933],
                    usernames:['U3lkQmFycmV0dA==', 'ZmFjdW5kb3g=', 'YXBwbGVqb2Jz', 'bWl5dW1pa3U=', 'aGVpc2VuYmVyZ3doaXRl', 'am9qb2FkdmVudHVyZQ==', 'ZXplcXVpZWxib3k=', 'bmVtb3dpbHNvbg==', 'Y3JlYW1waWV6ZXVz', 'Y2FlbGk=', 'dGl0YW5vYm9h', 'ZGFzYW5paQ==', 'bWFnaWN3YXlz', 'Y2FyYXZhbjkz', 'ZHJlYW1lcnNvbmVkYXk=', 'bmFva293bw==', 'bm9uYW1ldGhhbmtzYXNzaG9sZQ==', 'bm5vbmFtZXRoYW5rc2Fzc2hvbGU=', 'cGF0cmVvbg==', 'cGFuZ2Vh', 'SmVpa2kxOA==', 'amVpa2lfMTg=', 'cm9ib3RwbGF0b24=', 'ZmlmYXBlcw==', 'Y3Jpc3RpYW5yaW9zb25l', 'c2hha2lyYV9tZWJhcmFr', 'cGVyc29uYTg=', 'bHVwaW50aGV0aGlyZA==', 'Z2Vuc2hpbl9pbXBhY3Q=', 'c2hpbl9jaGFu', 'anV0c3U=', 'cmV0cm92bG9ncw==', 'a2FybWFsYW5k', 'eW9rb3lvc2hpZGE=', 'bWFkdXJv', 'ZHVxdWU=', 'YmFuZ19iYW5n', 'dXJzcw==', 'c3VtbWVyc2xhbXd3Zg==', 'cm9sbGluZ3N0b25l', 'Y2FzY2E=', 'cHJpbmNlcm95Y2U=', 'YW5ndWxhcg==', 'ZmFzZTE=', 'c2lzaWxpYW4=', 'Z29sZGVuemV0c3U=', 'YmFrdWFuaW1l', 'dGlmYXhjb3JuZW8=', 'cGhhbnRvbXJlcXVpZW0=', 'Y3Jpc3RpYW5vcm9uYWxkbw==', 'bmF5aWI=', 'd2lzbWljaHU=', 'YnVrZWxl', 'ZWN1YWRvcg==', 'ZmFzZWRvcw==', 'c21vc2g=', 'ZGFpc3VrZWppZ2Vu', 'aGFhbGFuZA==', 'cm95YWxydW1ibGU=', 'ZmlkZWxjYXN0cm8=', 'Y2hhdm9xdWljbw==', 'Y2FsZW9ueW91dHViZQ==', 'bWFyaW9icm9zNjQ=', 'aW50ZWxpZ2VuY2lhYXJ0aWZpY2lhbA==', 'ZGFuaWVsYnJ5YW4=', 'ZnVuaWFuaW1l', 'd2lsbDk1', 'c3R1cGlkYml0Y2g=', 'bW9za2F1', 'YWRvYmVfYWJyb2NhdA==', 'YXJzZW5pb2x1cGlu', 'a2Fya3U=', 'c21pbGUtbWFu', 'bWFqb3JhbWFzaw==', 'YXVyb25wbGF5', 'RW5yaXF1ZUJ1bmJ1cnk=', 'RmxvcmljaWVudGE=', 'a2FrYXNoaV9oYXRha2U=', 'bXJfcm9ib3Q=', 'b2NjaWRlbnRhbGltYWdl', 'dG9reW9ob3RlbA==', 'dXNlcl8xMDI2NjQ2', 'dXNlcl8xMDI2NjY3', 'dXNlcl8xMDI2NjY0', 'Sm9obk1hbGRvbmFkbzIwMDA=', 'VHdpaXRlckZhY2Vib29r', 'QW50b25pb0JhbmRlcmFz', 'U2lkQmFycmV0dA==']
                },
                {
                    ids:[1055275, 1232503, 1205201, 1202339, 1199687, 1199684, 1198165, 1179806, 1196515, 1196517, 1196518, 1192575, 1182059, 1192285, 1191452, 1191399, 1190317, 1188789, 1188474, 1187688, 1187449, 1186112, 1177977, 1179026, 1178368, 1177975, 1177119, 1176348, 1175934, 1175507, 1171629, 1171247, 1170887, 1170561, 1170168, 1169823, 1169407, 1168999, 1168621, 1168221, 1167888, 1167490, 1161132, 1160083, 1155971, 1154547, 1154164, 1147781, 1147356, 1128278, 1121799, 1116489, 1115494, 1112395, 1110701, 1109495, 1108058, 1104814, 1102965, 1102587, 1102276, 1098369, 1090739, 1089315, 1087883, 1081341, 1057324, 1077164, 1070368, 1072147, 1073260, 1071826, 1071388, 1071174, 1069119, 1068778, 1067236, 1067236, 1066397, 1064164, 1065228, 1064920, 1064065, 1063335, 1063321, 1062942, 1062111, 1061811, 1061227, 1060791, 1060569, 1060415, 1059668, 1059211, 1058812, 1058524, 1058373, 1058088, 1057613, 1057624, 1057623, 1057572, 1057233, 1057230, 1057223, 1057001, 1057003, 1057005, 1057023, 1056945, 1056944, 1056892, 1056897, 1056895, 1056893, 1056887, 1056535, 1056525, 1056842, 1056465, 1056514, 1056512, 1055941, 1056464, 1056462, 1056459, 1056391, 1055667, 1055591, 1053730, 1055590],
                    usernames:['QWd1c0VYWFg=', 'RGV2aWFudGFydEZhbg==', 'Ymx1ZXdvbGZ4aG9tZXN0YXI=', 'ZmFuYXJ0bGFuZHV3dQ==', 'cGlvbGFzbWUxMjI=', 'QW5ncnlCaXJkcw==', 'cGVwZXBlcGVwZXBl', 'QWd1c1dlZWs=', 'Y3JhenljcmF6eQ==', 'ZG9zZnVuYTE2', 'd2F6aXRhZmFjaGVyYQ==', 'U2llbXByZTIwMDU=', 'U2llbXByZTIwMDE=', 'TWllcmNvbGVzWEQyMDEx', 'QWd1c2FrYWtrYQ==', 'RGlzY292ZXJ5S2lkcw==', 'U3F1YXJlMjAxMg==', 'cGFwZXJkcmF3', 'ZmFjaGVycGlvbGFz', 'cmVkZGl0MjAwNw==', 'RGV2aWFudGFydDIwMjI=', 'VHZjaXVkYWQ=', 'dHdpdHRlcjIwMTU=', 'VHdpdHRlcjIwMTI=', 'bmV3Z3JvdW5kczIwMTE=', 'VHdpdHRlcjIwMDk=', 'dHdpdHRlcjIwMDc=', 'WW91VHViZTIwMTk=', 'WW91VHViZTIwMjE=', 'WW91VHViZTIwMTI=', 'RGV2aWFudGFydDIwMDE=', 'ZGV2aWFudGFydDIwMTY=', 'ZGV2aWFudGFydDIwMTQ=', 'ZGV2aWFudGFydDIwMTg=', 'ZGV2aWFudGFydDIwMDg=', 'ZGV2aWFudGFydDIwMDc=', 'RGV2aWFudGFydDIwMDQ=', 'ZGV2aWFudGFydDIwMDA=', 'ZGV2aWFudGFydDIwMDk=', 'RmFjZWJvb2syMDIw', 'ZGV2aWFudGFydDIwMDM=', 'RGV2aWFudGFydDIwMDY=', 'ZGV2aWFudGFydDIwMjA=', 'RmFjZWJvb2syMDE1', 'RGV2aWFudGFydDIwMTc=', 'RGV2aWFudGFydDIwMDU=', 'Y3Jhenlmcm9nMjkz', 'RGV2aWFudGFydDIwMTE=', 'SXJpc2hVd1U=', 'bWF4aGFsbG8=', 'TXlMaXR0bGVQb255', 'RnVycnlGcmllbmRz', 'QmVzdGFuZEJlc3Rlcg==', 'VGFyYXRhYm9uZw==', 'bWFkYm94em9tYmllcw==', 'RnVycnlOZXR3b3Jr', 'bWlrZWNyYWNr', 'RnVycnlFNjIx', 'Y29tbWVudHMyMzM0', 'RnVyYm9vcnU=', 'YW5pbWFseW9rb2Nobw==', 'dG9taWVsZ2F0bw==', 'Y3VhZHJhZGl0b3ljaXJjdWxpdG8=', 'TWVDcmF6eQ==', 'd2l0c2VyZ2lv', 'ZnVycnlib29ydQ==', 'V2l0ZXJYRA==', 'd2FvbWlhbw==', 'c2tpbm55cjM0', 'TUFMQWlNQUdFTg==', 'TXVyZGVyRHJvbmVz', 'aXNpZGtzaWRpZGlkaWRpZWs=', 'aW5zdGl0dXRvRmFuZHdpZnFrZGs=', 'YWd1c3Rpbjc=', 'ZGdoaGdnaHRoaDE4MjI5', 'ZnVyYWZmaW5pdHlSdWxl', 'QXVkaW9hbmRseXJpY3M1NA==', 'QXVkaW9hbmRseXJpY3M1NA==', 'd29yaXNrZGtzc2s=', 'dGhlY29va2llZG9nNTU=', 'ZW5keXRjb29raWU=', 'c2NyYXRjaFhE', 'SG9vbGFJbkRldmlhbnRhcnQ=', 'ZnloZ2t1aHVo', 'dGhlQ29va2llQ2F0NDU=', 'dGhlY29va2llZG9nTlNGVw==', 'Z2d1amd2dXZneWc=', 'ZWlka2tkNGtka2Rr', 'V2lnanNvZmRqc2tla2tk', 'TmFyY2lzb0FudG9uaW9Sb2NoYTIwMjI=', 'a2F3YWlpRnVuTlNGVw==', 'QmFscm9nWW91', 'VGVyZXphbmRlcg==', 'Qm9uZ3VpdG9XZW9uNTEx', 'TWlrZU1pa2UxMg==', 'Q3Jhenlpc1RvY2E=', 'VG9jYWJvY2FYRHJ0dG8=', 'RmFudWluaW5pbm8=', 'dG9jYUJvY2FOU0ZX', 'RHRlU2plVW5pbmluaQ==', 'aXNsYW5kWFhY', 'VG9jYUJvY2FYRA==', 'RmVuRW5qb3kzMjM=', 'dG9jYWJhbmQ=', 'UGlua2llZHJvaWQ=', 'UnVsZTM0UGFoZWFsbmV0TlNGVw==', 'bWFyY2h1YWxz', 'QW5BVEhFTlNGVw==', 'ZGFwcHlib2lyMzQ=', 'YWd1c2VuanV0bw==', 'ZHdmZ2hqa2RzZmc=', 'TXJUcmFuY2U=', 'RmVuRW5qb3kzNjM=', 'RW5qdXRvTW9qYW11dG8=', 'cGlsaWNhc3Rpc2FiaW5h', 'RW5pY2t5MTEyMg==', 'REVGRkRHRkRC', 'd2l0c2VyZw==', 'SnVhbk1pZ3VlbFNhbnRpYUdvdFJpYW5h', 'Y2VubnNmd2RlbGlvZA==', 'RHRlU2plUGlsYXJYRA==', 'RHRlU2plQ2FzdGlsbG9QaWxhcg==', 'RHRlU2plUGlsYXI=', 'TlNGV2lvaW9pb2lvaW8=', 'Y2FybWVudGVqZXJhRURFRA==', 'YWd1c2hvbGFwcm95dHhk', 'ZGFwcHlib2k2NjY=', 'RGFwcHlib2kyMDE1', 'Z2hmZmdkZ2RkZmdmZA==', 'RGFwcHlib2kyMDEz', 'TG9McjM0eWF5']
                },
                {
                    ids:[439892, 1232538, 1232530, 1225908, 1222944, 1050811, 1113006, 1086788, 1067370, 1067558, 1067566, 1067572, 1067868, 1067863, 1067929, 1067929, 1067863, 1067868, 1067572, 1067566, 1067558, 1067370, 1064150, 1061308, 1056474, 1056031, 1055963, 1055960, 1054374, 1054365, 1054360, 1054283, 1053622, 1053660, 1053653, 1053652, 1053643, 1053641, 1053638, 1053635, 1053634, 1053631, 1053627, 1053613, 1053599, 1053594, 1053588, 1053584, 1053573, 1053569, 1053566, 1053563, 1053559, 1053558, 1053556, 1053550, 1053551, 1053548, 1053545, 1053539, 1053531, 1053533, 1053483, 1053401, 1053388, 1052966, 1049879, 1044507, 1044321, 1042330, 1029069, 1023352, 1022000, 1021922, 1018733, 1015301, 1015292, 1015291, 1015282, 1015275, 1015272, 1015264, 1015260, 1015258, 1015249, 1015230, 1015241, 1015238, 1013402, 1013344, 1012626, 1012468, 1012458, 1012460, 1010463, 1010199, 1010189, 1009177, 1004211, 1003498, 1001775, 1001781, 1001683, 1000937, 1000920, 1000914, 999969, 999710, 998961, 998823, 995286, 995086, 995077, 995036, 995032, 995020, 995022, 988229, 985184, 980209, 971844, 963438, 962395, 960853, 959572, 959570, 959567, 959566, 959565, 959564, 959562, 959560, 959561, 959559, 959555, 959553, 959551, 955314, 955311, 955287, 950122, 950112, 950110, 926527, 949580, 949017, 947858, 947565, 946249, 946246, 942930, 942934, 942556, 941906, 941878, 941877, 941876, 941869, 941868, 941704, 939716, 936287, 936280, 933994, 933350, 932366, 933312, 921676, 907563, 907565, 914658, 915199, 917609, 916258, 875393, 912734, 859775, 872130, 870798, 871305, 853974, 852759, 844315, 843673, 843643, 842927, 843530, 840728, 840668, 840258, 840464, 839211, 839210, 839120, 838238, 832866, 834539, 831187, 831185, 831180, 831177, 831176, 831143, 831134, 831133, 831129, 831127, 831124, 831120, 831119, 831117, 831113, 831115, 831094, 830434, 829823, 829817, 829592, 829503, 829488, 828912, 828276, 828645, 827384, 826538, 826504, 826500, 826499, 826497, 826427, 826426, 826424, 826414, 826402, 826398, 826396, 826392, 826390, 826388, 826385, 826374, 826370, 825851, 824531, 825802, 824007, 823137, 823108, 823093, 822713, 822705, 822435, 821976, 821568, 821547, 821543, 821422, 821421, 821541, 821423, 820725, 821299, 820305, 819293, 819291, 818967, 819189, 819209, 818652, 816858, 817650, 817652, 814972, 814971, 799246, 814966, 814963, 814957, 814953, 814943, 814207, 813599, 813601, 809584, 809582, 813345, 811216, 811217, 811191, 810764, 808969, 808966, 808744, 805223, 804850, 804870, 804300, 803889, 803478, 801868, 801864, 801866, 801865, 801867, 799346, 799166, 799055, 799063, 799048, 797257, 790341, 797101, 797113, 796235, 796236, 795461, 795475, 795476, 795477, 795478, 771609, 775261, 789338, 789336, 789335, 789334, 788508, 787604, 787605, 787603, 787544, 151006, 776727, 787557, 784995, 785540, 765877],
                    usernames:['c29uaWNzdWNrczIw', 'RGFya2NvbWV0aGxpZ2h0', 'aW1uZXdhbmRwdXJl', 'YWxsbWFzdGVyY29udHJvbHA=', 'Ym93c2VyZGVhdGg=', 'c2NsaXBt', 'RmlyZUZvcmNlRnJlZXpl', 'UmVzaWlpdA==', 'aXdvbnRxdQ==', 'QmVzdHdvcnN0aXc=', 'SGVycG8=', 'YmxlZXNpaWY=', 'U3dpaWZ0eQ==', 'aXBvcDg=', 'anVzdHRoZWVuZG5vdw==', 'anVzdHRoZWVuZG5vdw==', 'aXBvcDg=', 'U3dpaWZ0eQ==', 'YmxlZXNpaWY=', 'SGVycG8=', 'QmVzdHdvcnN0aXc=', 'aXdvbnRxdQ==', 'bHVidXNtYXNo', 'TGlua2lzYWxs', 'c25vb2l3', 'Ym93c3dyZGVhZGNvbmZpcm0=', 'Ym93c2VyYW5kcGVhY2hvbGRkaWVz', 'bm9tb3JlYm93c2Vy', 'U29BbmlfNzA=', 'aW1iYWFr', 'R2V0dXA=', 'U2VwZXJhdGV0aGV1bnB1cmU=', 'VHJhaWxscw==', 'UmV0aXN1a2Vu', 'd3d0Nzc=', 'V25xZQ==', 'SXd3aXRhbGw=', 'aXRyaXRvZGF5', 'U3dlZXBuaWlp', 'aXd3aTk=', 'U2traW4=', 'U2VleWFkYg==', 'cG9ubmtlZA==', 'dHJpZm9yb3dvbg==', 'c2FpdGFh', 'dXdvbnR3aW43NjY=', 'R29iM3lvb2Q=', 'c2VwcHQ=', 'dGVkbWtk', 'ZG9vbm4=', 'aXd3OTg3', 'a2tzc3Ns', 'Z29ubmU=', 'SmVzc2llSmFtZXM0', 'dXdpbGxkeQ==', 'c3VrYW5hMQ==', 'ZGFuZGllcw==', 'ZGFubmZhbGw=', 'ZGFuYm9vcnVsb3M=', 'YWxsb29zZGFuYm9vcnVkaWU=', 'ZnYxMzU3OQ==', 'TWF0YWRvcmJvaQ==', 'S2xpbW5UcmF2ZWxlcg==', 'U2hpbmppSWthcmlGYW4xOA==', 'VnR1YmVDaG9jb2I=', 'dG9wcGl0aW1lMg==', 'U29vblA=', 'ZnJvbnRpZXJhcHN5', 'aGllbmRqdWRnZW1lbnQ=', 'cHVyaWZpZnJlZW9mYmJj', 'UHVyaXR5aXRhbGw=', 'RGVmeW9kZGFuZHdpbmZvcnB1cmU=', 'bm9tb3JlaHVydA==', 'c2V0cmlnaHQ=', 'bG9qcmpu', 'cGl0YWxsbm93', 'bWlhYXA=', 'aW1wZmY=', 'dHJpaXNu', 'bG9rbg==', 'Ymlva3Jw', 'dHRwcG1hbg==', 'dGFrZW5vdmE=', 'bm1pdHRw', 'aXRlbmRzbm93cHVyZQ==', 'dHJ1c3R0YXRydXRo', 'dHVybnRvcHVyZQ==', 'ZGVsZXRldGhlbGllcw==', 'c3RvcHB0bg==', 'bWl0aXNmaW5hbGU=', 'YWxsdGhlcHVyZW5vdw==', 'aXNldG5m', 'd3RwaWFl', 'dHRjaWE=', 'bW9tb3JlZGlub3JhcGU=', 'bmlpa2tsc3g=', 'aW1kZg==', 'c21pdGVpdGFsbDRnb29k', 'c25hcGFuZGc0ZXZh', 'Z2V0b3ZhaGVyZQ==', 'YXZlbmdpbmFzc2VtYmxl', 'ZGluZ29jcm9jbw==', 'ZXhlY3V0aW9ubg==', 'bG1mYXBpYTEyMw==', 'dGFhd3M=', 'cGVyc2F2ZXJl', 'SHBhYXc=', 'aGF2ZWZhaXRo', 'ZmluYWxhbGxwdXJnZQ==', 'a2JiYnI=', 'd3RmbHV4dGltZQ==', 'dHRhYXc=', 'aXduYnNwdXJl', 'dHJhY3hvOA==', 'dGh1bmRhYmFieWw=', 'dHJhc2hub21v', 'SXdkb3RvcGlh', 'QnVzdHRoZW0=', 'TGVldmVmZXY=', 'SG10bWlkeXJw', 'QWxsaXNub3RoaW5nc3RhcnQ=', 'SHVsa3NtYWhoYQ==', 'UGxlc2M=', 'TXB1cmVO', 'SXdyb205OTA=', 'U2lkdmlz', 'UG9rZWdpcmxSQg==', 'S2F0ZnIzZW5k', 'TXBpNDQ0', 'UG9sbg==', 'Q2FuYWRhbmltZQ==', 'UGxhbw==', 'T3BwYWlt', 'TXBrZQ==', 'SGFtZGlua2Vs', 'SGQy', 'SHVtZmluaw==', 'RGhtaWY=', 'SHBpbg==', 'QWxlcnR0aGVwdXJl', 'UHVyc3Bu', 'TGk0cA==', 'U3RhYmY0ZXZh', 'U29sanV1aA==', 'T25lbHBw', 'U3VjY2Vzc3A=', 'TGV0c3Jpc2V1cA==', 'RGVhdGh0b2l0', 'U3VwZWVw', 'TG9ja25TZWN1cmU=', 'R29wdXJl', 'VGZkYXA=', 'SWFicGFwaWRhd2I=', 'TW9tZW50cGE=', 'UmZhYw==', 'QXZpYXRvcjg=', 'SXdubnNhYw==', 'SXNmcHc=', 'VHNpY2Fwc2Nmb2Fj', 'TmdzbXA=', 'Y3Jvd25vZnA=', 'SWxhbm1w', 'Tm9zcG4=', 'RGVycnlpdA==', 'V2lsbHJpbmd1', 'SG9vZGo=', 'VHlwZXpzaW5nbGU=', 'UmlzYWFnYQ==', 'UHV1ZWZ6', 'S2trb2xh', 'S29vbGtpYWZwaXA=', 'SGVscHRoZWZvcnNha2Vu', 'RHJpdmJoY2Jm', 'TGlja2t0', 'UElBSVA=', 'THVtYW4=', 'TGVvbmRvZXNudGV4aXN0', 'VGhpc3NpdGVpc2RlYWQ=', 'U29ycm93V2Fycmlvcg==', 'UHVyZWl0YWxs', 'TmV3d2VlYg==', 'RHVic28=', 'Tk5OX1Q=', 'aG9uZGFraWt1ZmFu', 'QnVja3lXaW50ZXI=', 'RGtyYXA=', 'RmVyYWxpZ2F0b3I=', 'SnVtaQ==', 'THBvbg==', 'UG9tcG0=', 'SnVzdG1hZGU=', 'VHJhdWpu', 'SWJhYmV0dGVy', 'U2l0dHk=', 'SGZ0aGlzd2F5', 'RGVzcHBlcm8=', 'SW5ubg==', 'U3ltYg==', 'SXdpbGx3aW4=', 'cGx1bXRyZWV3b3Jrcw==', 'Q3JpYXRk', 'VGhlRkU=', 'a251eG91Z2VzaW1w', 'cGVvbA==', 'ampuZA==', 'b3NpeGZhY2U=', 'anVzdHVzZXI=', 'SGV5bm1m', 'RG5kbmR3ZQ==', 'TWVvd3RoZGF0c3JpZ2h0', 'Q2Flbg==', 'R1Jnbw==', 'SXRzYWxsemlsY2g=', 'VW5ubmRlcg==', 'UHJlc3N1', 'SmZqbg==', 'TmV3d2NvdW4=', 'UG9pbGY=', 'RGFmZnlEdWNreXk=', 'QVN1a0Q=', 'SmVsbHlzdG9uZUJlYXI=', 'Sm5kYmZ0', 'T2wzMk90YWt1', 'U25pdmVseQ==', 'VW1m', 'aXdpbGxuZXZlcmRpZQ==', 'YWNvb2I=', 'VGhpc2lzcHQ=', 'T25lbXlzZWxm', 'Q2xhcmlmbm93', 'S2FHYXJlZmFrZXNvcHVyaWZ5', 'V3JvbmdLYWd0Ymk=', 'S2lzbm90aGlt', 'VG9yZWM=', 'U2ltY2l0eXVw', 'SXdpbGxuZXZlcmJiZg==', 'S2xlZg==', 'RXhjZWxsa2F0MDk=', 'b25zZWxm', 'SXducWU=', 'SnVyaWFrb3Rv', 'Qm94SmVsbHlzYW4=', 'Tm9vaWFy', 'VXBncmFkZW54bng=', 'R2F5Qm93c2Vy', 'TUhGSXRw', 'WXdua20=', 'TWVhYWk=', 'SGF0ZW9mYWxsdGhpbmdh', 'aGJoZXJv', 'Q2xvc2luZ29uZg==', 'QWxsaXNkb25l', 'SW1oZXJlcGVhY2U=', 'VXByaXZlcnRvdGFw', 'SW5kdXBhdA==', 'SXRpaXNw', 'TGF2aXN0b25hbg==', 'SWxpdmVmb3Jw', 'aG91c2VvZnRydXRoMTI=', 'VHJ1dGhhbmRKdXN0bWFu', 'U2FydWRpZXNmb3JldmVy', 'Q29tZXRvUHVyaXR5', 'QXNraW5ncHJpY2U=', 'QmZtYW0=', 'UHVyZXRoZUFsbA==', 'S2lsbEFsbHdob2h1cnQ=', 'UGZhbmFl', 'UGxhbnRHcm93eXoyNDg=', 'UHVyQ29t', 'UHVyZWZvcmV2ZXI=', 'SWhhdGVrYWV5YQ==', 'S2FleWFkb2VzbnRleGlzdA==', 'R2h0cw==', 'R2t0YQ==', 'UnVzc2tpSHVz', 'R29ka2lsbHRoZW1mb3JldmVy', 'R29kcGxlYXNla2lsbHRoZXNlZm9vbHM=', 'Tm9mdXRvc2hpZXZlcg==', 'SXdpbm5vdw==', 'V2lsbGliZWZyZWU=', 'SW11c3RwdXJpZnlpdGFsbA==', 'S2x1enM=', 'UHVyaWZ5dGltZQ==', 'Tm9tb3JlcGFpbjEy', 'SWhhdGV0aGlzd29ybGQx', 'RGVhdGhhbmRQdXJpZnk=', 'U3RhcnRvdmVycGxlYXNl', 'U3Ru', 'SWh0cw==', 'TnhuY25jbg==', 'UHVyZXJldHVybnM=', 'UGVha3B1cmU=', 'QWJhbmRvbmhvcGVhbmRkaWU=', 'UHVyaWZ5YWxsOTc=', 'S2VuZG9lc250ZXhpc3Q=', 'SWtpbGxrZW5mb3JldmVy', 'RW5kb2ZldmVyeXRoaW5n', 'RW5kaXRhbGxs', 'SGRkanNz', 'SGVrZGs=', 'Rmh6cQ==', 'bWVzZGY=', 'TGRzbmQ=', 'cm9vbWJyZWE=', 'SGVyb3J0aGVy', 'Ym9kZWdhaGVybw==', 'Um9ja29uYm95', 'SGRoZmg=', 'TWFucHVyZQ==', 'QmZiZmJm', 'TmRpaA==', 'Z2l2ZXRoZXRydXRo', 'Qm93c2VyZG9lc250ZXhpc3Q=', 'TmVuZXV3', 'bmV2ZXJtb3JlMg==', 'RXZlcnl0aGluZ3N1Y2tz', 'UmV2ZW5nZXB1cmdl', 'UmV2ZW5nZXB1cmdlMQ==', 'UmV2ZW5nZXB1cmdlMg==', 'VG9tMjk=', 'UGVyZmVjdHBlbg==', 'Q2hhcml6', 'UHVyaWZ5YWxs', 'SXRzYWxscHVyaWZpZWQ=', 'VGVybzEy', 'UmV0dXJuZm9yY2hhbmNl', 'U3BpZGVybWF0dA==', 'VGFsbGhvNzU=', 'RGVzdGlQb3c=', 'UHVyZ2VldndyeXRoaW5n', 'RHJlYW1vZmxvc3M=', 'RGFGb3g=', 'Rmx1c2hvdGJsdWVz', 'UHVyZ2Vmb3JldmE=', 'UHVyZ2VwdXJl', 'RHJpdg==', 'QmFja2hvcGU=']
                },
                {
                    ids:[827019,1157305],
                    usernames:['dXNlcl84MjcwMTk=']
                },
            ]
        },
        {
            domain:"aibooru.online",
            sock_db:[
                {
                    ids:[34957, 33819, 32922, 20633, 39621],
                    usernames:["dXNlcl8zNDk1Nw==","dXNlcl8zMzgxOQ==","dXNlcl8zMjkyMg==","dXNlcl8yMDYzMw==","Z2xvYmhs"],
                },
            ]
        },
        {
            domain:"gaybooru.app",
            sock_db:[
                {
                    ids:[10,9,7,6,5],
                    usernames:["c3dwZWRpYS5udA==","dXNlcl85","dXNlcl83","dXNlcl82","dXNlcl81"],
                },
            ]
        }
    ]

    danbooru_sock_account_db=danbooru_sock_account_db.find(x=>x.domain==`${window.location.host}`)
    if(danbooru_sock_account_db) danbooru_sock_account_db=danbooru_sock_account_db.sock_db
    else danbooru_sock_account_db=[]

    /*var emoji_replacements = [
        {
            name:"politecat",
            new_url:"https://i.imgur.com/9MCYjIw.png",
        }
    ]

    emoji_replacements.forEach(emoji_replacement => {
        Array.from(document.querySelectorAll(`emoji[data-name="${emoji_replacement.name}"] img`)).forEach(emoji_img => emoji_img.src=emoji_replacement.new_url);
    })*/


    var my_html_elem=null

    if(!myFunctionsYYEF) var myFunctionsYYEF = window.myFunctionsYYEF = {};
    myFunctionsYYEF.htmlToNode = function(html) {
        const template = document.createElement('template');
        template.innerHTML = html;
        const nNodes = template.content.childNodes.length;
        if (nNodes !== 1) {
            throw new Error(
                `html parameter must represent a single node; got ${nNodes}. ` +
                'Note that leading or trailing spaces around an element in your ' +
                'HTML, like " <img/> ", get parsed as text nodes neighbouring ' +
                'the element; call .trim() on your input to avoid this.'
            );
        }
        return template.content.firstChild;
    }

    myFunctionsYYEF.dmailsShowUploads = function() {
        document.querySelector("#dmailsshowuploadbutton").remove();
        document.querySelector("#dmails-table tr:has(th) th.to-column").outerHTML+=`<th>Comments since Dmail was sent</th>`
        document.querySelector("#dmails-table tr:has(th) th.to-column").outerHTML+=`<th>Post edits since Dmail was sent</th>`
        document.querySelector("#dmails-table tr:has(th) th.to-column").outerHTML+=`<th>Uploads since Dmail was sent</th>`
        document.querySelectorAll("#dmails-table tr:has(td)").forEach(dmail => {
            var sent_to_username=dmail.querySelector("td.to-column a").innerHTML;
            var date_sent=dmail.querySelector("td.date-column time").innerHTML.replaceAll(" ","_");
            dmail.querySelector("td.to-column").outerHTML+=`<td class="uploads-column"></td>`
            dmail.querySelector("td.uploads-column").outerHTML+=`<td class="post-versions-column"></td>`
            dmail.querySelector("td.post-versions-column").outerHTML+=`<td class="comments-column"></td>`
            fetch(`/counts/posts.json?tags=(date:>${date_sent} user:${sent_to_username})`)
                .then(response=>response.json())
                .then(data => {
                dmail.querySelector("td.uploads-column").innerHTML=`<a href='/posts?tags=(status:any date:>${dmail.querySelector("td.date-column time").innerHTML.replaceAll(" ","_")} user:${dmail.querySelector("td.to-column a").innerHTML})'>${data.counts.posts}</a>`
            })
            setTimeout(function() {
                fetch(`/post_versions.json?commit=Search&search[updated_at]=>${date_sent}&search[updater_name]=${sent_to_username}&search%5Bis_new%5D=false`)
                    .then(response=>response.json())
                    .then(data => {
                    dmail.querySelector("td.post-versions-column").innerHTML=`<a href='/post_versions?commit=Search&search[updated_at]=>${date_sent}&search[updater_name]=${sent_to_username}&search%5Bis_new%5D=false'>${data.length}</a>`
                })
            }, 500);
            setTimeout(function() {
                fetch(`/comments.json?commit=Search&group_by=comment&search[creator_name]=${sent_to_username}+&search[created_at]=>${date_sent}`)
                    .then(response=>response.json())
                    .then(data => {
                    dmail.querySelector("td.comments-column").innerHTML=`<a href='/comments?commit=Search&group_by=comment&search[creator_name]=${sent_to_username}+&search[created_at]=>${date_sent}'>${data.length}</a>`
                })
            }, 1000);
        })
    }

    myFunctionsYYEF.show1UpStr = function(clicked_button) {
        var string_to_show=`child:${document.querySelector("section#content .image-container").dataset.id} rating:${document.querySelector("#post-info-rating").innerHTML.split("Rating: ")[1][0]} ${document.querySelector("section#content .image-container").dataset.tags}`
        document.querySelector("#post-sections").outerHTML+=`<p>${string_to_show}</p>`;
    }

    myFunctionsYYEF.applySettings = function() {
        localStorage.setItem("mdpk-extrafeatures-settings-hotgarbagepostslink-enable", document.querySelector("#mdpk-ef-selectinput-hotgarbagepostslink-enable").value );
        localStorage.setItem("mdpk-extrafeatures-settings-artistsondanboorulink-enable", document.querySelector("#mdpk-ef-selectinput-artistsondanboorulink-enable").value );
        localStorage.setItem("mdpk-extrafeatures-settings-userawfilesfortransparentandanimatedposts-enable", document.querySelector("#mdpk-ef-selectinput-userawfilesfortransparentandanimatedposts-enable").value );
        localStorage.setItem("mdpk-extrafeatures-settings-userawfilesforallthumbnails-enable", document.querySelector("#mdpk-ef-selectinput-userawfilesforallthumbnails-enable").value );
    }

    // link for browsing hot garbage posts
    if(hot_garbage_posts_link_e==1) {
        if(document.querySelector("#subnav-hot")) document.querySelector("#subnav-hot").outerHTML+=`<li id="subnav-hotgarbage"><a id="subnav-recentlymintagged-link" href="/posts?tags=(gentags:<10 age:>20min age:<20d status:any -no_humans)">Recently Mintagged</a></li>`;
        if(document.querySelector("#subnav-hot")) document.querySelector("#subnav-hot").outerHTML+=`<li id="subnav-hotgarbage"><a id="subnav-hotgarbage-link" href="/posts?tags=%28age%3A<2d+order%3Ascore_asc+status%3Aany%29&z=5">Hot Garbage</a></li>`;
    }

    if(document.querySelector(`meta[name="blacklisted-tags"]`)) {
        var blacklist_append_tagquery=""
        var get_argument="";
        const urlParams = new URLSearchParams(window.location.search);
        const myParam = urlParams.get('tags');
        if(myParam) get_argument=`(${myParam})`;
        document.querySelector(`meta[name="blacklisted-tags"]`).content.split(",").forEach(line => {
            blacklist_append_tagquery+=`-(${line}) `
        })
        blacklist_append_tagquery=`(${blacklist_append_tagquery})`
        console.log(blacklist_append_tagquery)
        if(document.querySelector("#subnav-hot")) document.querySelector("#subnav-hot").outerHTML+=`<li id="subnav-hotgarbage"><a id="subnav-recentlymintagged-link" href="/posts?tags=${get_argument} ${blacklist_append_tagquery}">Append Blacklisted Tags</a></li>`;
    }

    fetch('/profile.json')
        .then(response => response.json())
        .then(data => {

    })

    // link for browsing artists with a danbooru account
    if(artists_on_danbooru_link_e==1) if(document.querySelector("#subnav-artists")) document.querySelector("#subnav-artists").outerHTML+=`<li id="subnav-hotgarbage"><a id="subnav-hotgarbage-link" href="/artists?commit=Search&search%5Border%5D=post_count&search%5Burl_matches%5D=%2A${document.querySelector("#app-name").innerHTML.toLowerCase()}%2A">Artists on ${document.querySelector('#app-name').innerHTML}</a></li>`;

    // button for applying tagscript to all visible posts
    if(document.querySelector("#mode-box")) {
        var my_add_button=`<input type="submit" onclick='Array.from(document.querySelectorAll(".post-preview")).forEach(item => item.querySelector("img").click())' id="btn-applytagscripttoallvisible" style="margin-top:5px;" value="Apply to all visible" class="button-primary button-sm">`;
        //document.querySelector("#mode-box h2").onclick=function() {document.querySelector("#mode-box").innerHTML+=`${my_add_button}`;};
        document.querySelector("#mode-box h2").onclick=function() {if(document.querySelector("#btn-applytagscripttoallvisible")==null) document.querySelector("#mode-box").appendChild(myFunctionsYYEF.htmlToNode(my_add_button)) }
    }

    // enable transparent backgrounds for thumbnails
    if(use_raw_files_for_transparent_and_animated_posts==1)
    Array.from(document.querySelectorAll("article.post-preview")).filter( item => (item.dataset.tags.split(" ").includes("transparent_background") || item.dataset.tags.split(" ").includes("animated")) ).forEach(item=>{
        console.log(item.dataset.id)
        fetch(`/posts/${item.dataset.id}.json`)
            .then(response => response.json())
            .then(json => {
            console.log(item.querySelector("img"))
            var selected_asset_variant=json.media_asset.variants[json.media_asset.variants.length-1]
            if(selected_asset_variant.url.endsWith(".zip")) {
                selected_asset_variant=json.media_asset.variants[json.media_asset.variants.length-2]
            }
            item.querySelector("img").src=selected_asset_variant.url
            item.querySelector("img").style=`background-image: linear-gradient(45deg, #1d1d1d 25%, transparent 25%), linear-gradient(-45deg, #1d1d1d 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #1d1d1d 75%), linear-gradient(-45deg, transparent 75%, #1d1d1d 75%); background-size: 20px 20px; background-position: 0 0, 0 10px, 10px -10px, -10px 0px;`
            item.querySelector("source").srcset=selected_asset_variant.url;
            if(selected_asset_variant.url.endsWith(".mp4") || selected_asset_variant.url.endsWith(".webm") ) {
                //item.querySelector("img").src+="#t=0,5"
                item.querySelector("img").outerHTML=item.querySelector("img").outerHTML.replace("<img","<video autoplay muted loop")
            }
            //console.log(json.media_asset.variants)
        })
    })

    if(use_raw_files_for_all_thumbnails==1)
    Array.from(document.querySelectorAll("article.post-preview")).forEach(item=>{
        console.log(item.dataset.id)
        fetch(`/posts/${item.dataset.id}.json`)
            .then(response => response.json())
            .then(json => {
            console.log(item.querySelector("img"))
            var selected_asset_variant=json.media_asset.variants[json.media_asset.variants.length-1]
            if(selected_asset_variant.url.endsWith(".zip")) {
                selected_asset_variant=json.media_asset.variants[json.media_asset.variants.length-2]
            }
            item.querySelector("img").src=selected_asset_variant.url
            item.querySelector("img").style=`background-image: linear-gradient(45deg, #1d1d1d 25%, transparent 25%), linear-gradient(-45deg, #1d1d1d 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #1d1d1d 75%), linear-gradient(-45deg, transparent 75%, #1d1d1d 75%); background-size: 20px 20px; background-position: 0 0, 0 10px, 10px -10px, -10px 0px;`
            item.querySelector("source").srcset=selected_asset_variant.url;
            if(selected_asset_variant.url.endsWith(".mp4") || selected_asset_variant.url.endsWith(".webm") ) {
                //item.querySelector("img").src+="#t=0,5"
                item.querySelector("img").outerHTML=item.querySelector("img").outerHTML.replace("<img","<video autoplay muted loop")
            }
            //console.log(json.media_asset.variants)
        })
    })

    if(/\/uploads([^/]*)$/.test(window.location.href)) {
        console.log("hi");
        document.querySelector("form").outerHTML+=`<button class="ui-button" id="click-url-log-custombutton">Click URL log</button>`;
        document.querySelector("#click-url-log-custombutton").onclick=function() {
            var clicked_assets_urls=""
            document.querySelectorAll(".media-asset-preview a").forEach(item => {
                item.addEventListener("click",function(e) {
                    e.preventDefault();
                    if(!clicked_assets_urls.includes(this.href)) clicked_assets_urls+=this.href+"\n"
                    console.log(clicked_assets_urls)
                })
            })
        }
    }

    if(/\/uploads\/(.*)(\d+)$/.test(window.location.href)) {

        function prevent_posting() {
             document.querySelector(".tab-panels .tags-tab").remove();
        }

        var is_ppd=document.querySelector(".upload-pixel-perfect-duplicate-warning");
        if(is_ppd) {
            prevent_posting();
            document.querySelector(".similar-tab").click();
        }

        setTimeout(function() {

            document.querySelectorAll(".posts-container .post-preview").forEach(dupe => {
                console.log(dupe.querySelector(".text-xs.text-center.mt-1"))
                dupe.querySelector(".text-xs.text-center.mt-1").innerHTML=`<div style="color:gray">New: ${document.querySelector(`.upload-image-container a[href^="/media_assets/"]`).innerHTML}</div>${dupe.querySelector(".text-xs.text-center.mt-1").innerHTML}`
                dupe.style.position="relative";
                dupe.innerHTML+=`
            <div style="cursor:pointer; border-radius:5px; display:flex; justify-content:center; align-items:center; background: #00000087; backdrop-filter: blur(3px); border: 1px solid gray; box-sizing: border-box; width:70px; height:20px; position:absolute; top:5px; left:5px;" onclick="document.querySelector('#post_tag_string').value=\`child:${dupe.dataset.id} rating:${dupe.dataset.rating} ${dupe.dataset.tags.replaceAll(/(commentary)|((\w+)commentary)|(bad(\w*)_id)|(inactive_account)/g," ")}\`; document.querySelector('.tags-tab').click()">
            <span>1-up</span>
            </div>
            `
            })

        }, 1000)
    }

    if(window.location.href.endsWith("/settings")) {
        document.querySelector(".tab-list").innerHTML+=`
              <a class="tab security-mdpk-ef" x-on:click.prevent="active = 100" x-bind:class="{ 'active-tab': active === 3 }" href="#">MDPK extra features</a>
           `;
        document.querySelector(".tab-panels").innerHTML+=`
<div class="tab-panel advanced-tab active-tab" x-bind:class="{ 'active-tab': active === 100 }">
   <form class="simple_form edit_user" id="edit_user_1211591" autocomplete="off" novalidate="novalidate" action="/users/1211591" accept-charset="UTF-8" method="post">
      <input type="hidden" name="_method" value="patch" autocomplete="off"><input type="hidden" autocomplete="off">

      <div class="input select optional user_new_post_navigation_layout field_with_hint">
         <label class="select optional" for="user_new_post_navigation_layout">Hot Garbage Posts link</label>
         <select class="select optional" id="mdpk-ef-selectinput-hotgarbagepostslink-enable">
            <option value="1">Yes</option>
            <option value="0">No</option>
         </select>
         <span class="hint">Show a button that takes you to recently uploaded posts (age:<2d) ordered by their score from lowest to highest</span>
      </div>

      <div class="input select optional user_new_post_navigation_layout field_with_hint">
         <label class="select optional" for="user_new_post_navigation_layout">Artists on Danbooru link</label>
         <select class="select optional" id="mdpk-ef-selectinput-artistsondanboorulink-enable">
            <option value="1">Yes</option>
            <option value="0">No</option>
         </select>
         <span class="hint">Show a button that takes you to the page that shows the list of artists who have a Danbooru account</span>
      </div>

      <div class="input select optional user_new_post_navigation_layout field_with_hint">
         <label class="select optional" for="user_new_post_navigation_layout">Show animated and transparent thumbnails</label>
         <select class="select optional" id="mdpk-ef-selectinput-userawfilesfortransparentandanimatedposts-enable">
            <option value="1">Yes</option>
            <option value="0">No</option>
         </select>
         <span class="hint">Enabling this will make Danbooru use raw files as thumbnails for posts tagged as transparent or animated. Enabling this could also cause lags, sending too many web requests, excessive cache and RAM memory build-up and high CPU usage.</span>
      </div>

      <div class="input select optional user_new_post_navigation_layout field_with_hint">
         <label class="select optional" for="user_new_post_navigation_layout">Use raw files for all thumbnails</label>
         <select class="select optional" id="mdpk-ef-selectinput-userawfilesforallthumbnails-enable">
            <option value="1">Yes</option>
            <option value="0">No</option>
         </select>
         <span class="hint">Enabling this will do the same as above, but it will do so for all posts.</span>
      </div>
      <input type="submit" class="btn" data-disable-with="Submit" onclick="myFunctionsYYEF.applySettings()">

   </form>
</div>
           `
        document.querySelector("#mdpk-ef-selectinput-hotgarbagepostslink-enable").value=localStorage.getItem("mdpk-extrafeatures-settings-hotgarbagepostslink-enable");
        document.querySelector("#mdpk-ef-selectinput-artistsondanboorulink-enable").value=localStorage.getItem("mdpk-extrafeatures-settings-artistsondanboorulink-enable");
        document.querySelector("#mdpk-ef-selectinput-userawfilesfortransparentandanimatedposts-enable").value=localStorage.getItem("mdpk-extrafeatures-settings-userawfilesfortransparentandanimatedposts-enable");
        document.querySelector("#mdpk-ef-selectinput-userawfilesforallthumbnails-enable").value=localStorage.getItem("mdpk-extrafeatures-settings-userawfilesforallthumbnails-enable");
    }

    var tmp_collection=0;
    var html_user_level_options=`
<option value="10">Restricted</option>
<option value="20">Member</option>
<option value="30">Gold</option>
<option value="31">Platinum</option>
<option value="32">Builder</option>
<option value="35">Contributor</option>
<option value="37">Approver</option>
<option value="40">Moderator</option>
<option value="50">Admin</option>
<option value="60">Owner</option>
    `;

    if(/https:.*\/(posts)\/.*/.test(window.location.href)) {
        // do not bump by default
        var checkbox_donotbump=document.querySelector(".comment_do_not_bump_post input[type='checkbox']");
        if(checkbox_donotbump) checkbox_donotbump.click();
    }

    if(/https:.*\/(user_feedbacks|bans).*/.test(window.location.href)) {
        tmp_collection=document.querySelectorAll("#a-index form div");
        tmp_collection[tmp_collection.length-1].outerHTML+=`

        <div class="input string optional search_user_id"><label class="string optional" for="search_user_id">User ID(s)</label><input class="string optional" type="text" name="search[user_id]" id="search_user_id"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User upload count</label><input class="string optional" type="text" name="search[user][post_upload_count]" id="search_upload_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User note update count</label><input class="string optional" type="text" name="search[user][note_update_count]" id="search_note_update_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User post update count</label><input class="string optional" type="text" name="search[user][post_update_count]" id="search_post_update_count"></div>

            <div class="input select optional search_level"><label class="select optional" for="search_level">Level</label><select class="select optional" name="search[user][level]" id="search_level"><option value="" label=" "></option>
${html_user_level_options}</select></div>

        <div class="input select optional search_creator_level"><label class="select optional" for="search_creator_level">Creator Level</label><select class="select optional" name="search[creator][level]" id="search_creator_level"><option value="" label=" "></option>
${html_user_level_options}</select></div>
        `
        document.querySelector("#search_user_id").value=(new URLSearchParams(window.location.search)).get('search[user_id]');
        document.querySelector("#search_level").value=(new URLSearchParams(window.location.search)).get('search[user][level]');
        document.querySelector("#search_creator_level").value=(new URLSearchParams(window.location.search)).get('search[creator][level]');
        document.querySelector("#search_note_update_count").value=(new URLSearchParams(window.location.search)).get('search[user][note_update_count]');
        document.querySelector("#search_post_update_count").value=(new URLSearchParams(window.location.search)).get('search[user][post_update_count]');
        document.querySelector("#search_upload_count").value=(new URLSearchParams(window.location.search)).get('search[user][post_upload_count]');
    }

    if(/https:.*\/(users)(\?.*|$)/.test(window.location.href)) {
        tmp_collection=document.querySelectorAll("#a-index form div");
        tmp_collection[tmp_collection.length-1].outerHTML+=`

        <div class="input string optional search_id"><label class="string optional" for="search_id">User ID</label><input class="string optional" type="text" name="search[id]" id="search_id"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User upload count</label><input class="string optional" type="text" name="search[post_upload_count]" id="search_upload_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User note update count</label><input class="string optional" type="text" name="search[note_update_count]" id="search_note_update_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User post update count</label><input class="string optional" type="text" name="search[post_update_count]" id="search_post_update_count"></div>
        <div class="input select optional search_is_deleted"><label class="select optional" for="search_is_deleted">Deleted?</label><select class="select optional" name="search[is_deleted]" id="search_is_deleted"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>
        <div class="input select optional search_is_banned"><label class="select optional" for="search_is_banned">Banned?</label><select class="select optional" name="search[is_banned]" id="search_is_banned"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>
        `
        document.querySelector("#search_id").value=(new URLSearchParams(window.location.search)).get('search[id]');
        document.querySelector("#search_note_update_count").value=(new URLSearchParams(window.location.search)).get('search[note_update_count]');
        document.querySelector("#search_post_update_count").value=(new URLSearchParams(window.location.search)).get('search[post_update_count]');
        document.querySelector("#search_upload_count").value=(new URLSearchParams(window.location.search)).get('search[post_upload_count]');
        document.querySelector("#search_is_deleted").value=(new URLSearchParams(window.location.search)).get('search[is_deleted]');
        document.querySelector("#search_is_banned").value=(new URLSearchParams(window.location.search)).get('search[is_banned]');
    }

    if(/https:.*\/(comments)(\?.*)/.test(window.location.href)) {
        tmp_collection=document.querySelectorAll("#a-index form div");
        tmp_collection[tmp_collection.length-1].outerHTML+=`

        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User upload count</label><input class="string optional" type="text" name="search[creator][post_upload_count]" id="search_upload_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User note update count</label><input class="string optional" type="text" name="search[creator][note_update_count]" id="search_note_update_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User post update count</label><input class="string optional" type="text" name="search[creator][post_update_count]" id="search_post_update_count"></div>
        <div class="input select optional search_is_deleted"><label class="select optional" for="search_is_deleted">Deleted?</label><select class="select optional" name="search[creator][is_deleted]" id="search_is_deleted"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>
        <div class="input select optional search_is_banned"><label class="select optional" for="search_is_banned">Banned?</label><select class="select optional" name="search[creator][is_banned]" id="search_is_banned"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>
<div class="input select optional search_level"><label class="select optional" for="search_level">Level</label><select class="select optional" name="search[creator][level]" id="search_level"><option value="" label=" "></option>
${html_user_level_options}</select></div>
        `
        document.querySelector("#search_note_update_count").value=(new URLSearchParams(window.location.search)).get('search[creator][note_update_count]');
        document.querySelector("#search_post_update_count").value=(new URLSearchParams(window.location.search)).get('search[creator][post_update_count]');
        document.querySelector("#search_upload_count").value=(new URLSearchParams(window.location.search)).get('search[creator][post_upload_count]');
        document.querySelector("#search_is_deleted").value=(new URLSearchParams(window.location.search)).get('search[creator][is_deleted]');
        document.querySelector("#search_is_banned").value=(new URLSearchParams(window.location.search)).get('search[creator][is_banned]');
        document.querySelector("#search_level").value=(new URLSearchParams(window.location.search)).get('search[creator][level]');
    }

    if(/https:.*\/(forum_posts\/search)$/.test(window.location.href)) {
        tmp_collection=document.querySelectorAll("#a-search form div");
        tmp_collection[tmp_collection.length-1].outerHTML+=`

        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User upload count</label><input class="string optional" type="text" name="search[creator][post_upload_count]" id="search_upload_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User note update count</label><input class="string optional" type="text" name="search[creator][note_update_count]" id="search_note_update_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User post update count</label><input class="string optional" type="text" name="search[creator][post_update_count]" id="search_post_update_count"></div>
        <div class="input select optional search_is_deleted"><label class="select optional" for="search_is_deleted">Deleted?</label><select class="select optional" name="search[creator][is_deleted]" id="search_is_deleted"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>
        <div class="input select optional search_is_banned"><label class="select optional" for="search_is_banned">Banned?</label><select class="select optional" name="search[creator][is_banned]" id="search_is_banned"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>
<div class="input select optional search_level"><label class="select optional" for="search_level">Level</label><select class="select optional" name="search[creator][level]" id="search_level"><option value="" label=" "></option>
${html_user_level_options}</select></div>
        `
        document.querySelector("#search_note_update_count").value=(new URLSearchParams(window.location.search)).get('search[creator][note_update_count]');
        document.querySelector("#search_post_update_count").value=(new URLSearchParams(window.location.search)).get('search[creator][post_update_count]');
        document.querySelector("#search_upload_count").value=(new URLSearchParams(window.location.search)).get('search[creator][post_upload_count]');
        document.querySelector("#search_is_deleted").value=(new URLSearchParams(window.location.search)).get('search[creator][is_deleted]');
        document.querySelector("#search_is_banned").value=(new URLSearchParams(window.location.search)).get('search[creator][is_banned]');
        document.querySelector("#search_level").value=(new URLSearchParams(window.location.search)).get('search[creator][level]');
    }

    if(/https:.*\/(user_name_change_requests)(\?.*|$)/.test(window.location.href)) {
        document.querySelector("#a-index h1").outerHTML+=`
              <form autocomplete="off" novalidate="novalidate" class="simple_form search-form inline-form" action="/user_name_change_requests" accept-charset="UTF-8" method="get">
      <div class="input string optional search_name_matches"><label class="string optional" for="search_name_matches">Name</label><input data-autocomplete="user" class="string optional ui-autocomplete-input" type="text" name="search[user][name_matches]" id="search_name_matches" autocomplete="off"></div>
      <div class="input select optional search_level"><label class="select optional" for="search_level">Level</label><select class="select optional" name="search[user][level]" id="search_level"><option value="" label=" "></option>
${html_user_level_options}</select></div>

        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User upload count</label><input class="string optional" type="text" name="search[user][post_upload_count]" id="search_upload_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User note update count</label><input class="string optional" type="text" name="search[user][note_update_count]" id="search_note_update_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User post update count</label><input class="string optional" type="text" name="search[user][post_update_count]" id="search_post_update_count"></div>
        <div class="input select optional search_is_deleted"><label class="select optional" for="search_is_deleted">Deleted?</label><select class="select optional" name="search[user][is_deleted]" id="search_is_deleted"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>
        <div class="input select optional search_is_banned"><label class="select optional" for="search_is_banned">Banned?</label><select class="select optional" name="search[user][is_banned]" id="search_is_banned"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>

      <input type="submit" name="commit" value="Search" data-disable-with="Search">
</form>
        `
        document.querySelector("#search_name_matches").value=(new URLSearchParams(window.location.search)).get('search[user][name_matches]');
        document.querySelector("#search_level").value=(new URLSearchParams(window.location.search)).get('search[user][level]');
        document.querySelector("#search_post_update_count").value=(new URLSearchParams(window.location.search)).get('search[user][post_update_count]');
        document.querySelector("#search_upload_count").value=(new URLSearchParams(window.location.search)).get('search[user][post_upload_count]');
        document.querySelector("#search_is_deleted").value=(new URLSearchParams(window.location.search)).get('search[user][is_deleted]');
        document.querySelector("#search_is_banned").value=(new URLSearchParams(window.location.search)).get('search[user][is_banned]');
    }

    if(/https:.*\/(bulk_update_requests)(\?.*|$)/.test(window.location.href)) {
        tmp_collection=document.querySelectorAll("#a-index form div");
        tmp_collection[tmp_collection.length-1].outerHTML+=`

        <div class="input select optional search_level"><label class="select optional" for="search_level">User level</label><select class="select optional" name="search[user][level]" id="search_level"><option value="" label=" "></option>
${html_user_level_options}</select></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User upload count</label><input class="string optional" type="text" name="search[user][post_upload_count]" id="search_upload_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User note update count</label><input class="string optional" type="text" name="search[user][note_update_count]" id="search_note_update_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User post update count</label><input class="string optional" type="text" name="search[user][post_update_count]" id="search_post_update_count"></div>
        <div class="input select optional search_is_deleted"><label class="select optional" for="search_is_deleted">User deleted?</label><select class="select optional" name="search[user][is_deleted]" id="search_is_deleted"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>
        <div class="input select optional search_is_banned"><label class="select optional" for="search_is_banned">User banned?</label><select class="select optional" name="search[user][is_banned]" id="search_is_banned"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>

        <div class="input select optional search_level"><label class="select optional" for="search_level">Approver level</label><select class="select optional" name="search[approver][level]" id="search_level_approver"><option value="" label=" "></option>
${html_user_level_options}</select></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">Approver upload count</label><input class="string optional" type="text" name="search[approver][post_upload_count]" id="search_upload_count_approver"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">Approver note update count</label><input class="string optional" type="text" name="search[approver][note_update_count]" id="search_note_update_count_approver"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">Approver post update count</label><input class="string optional" type="text" name="search[approver][post_update_count]" id="search_post_update_count_approver"></div>
        <div class="input select optional search_is_deleted"><label class="select optional" for="search_is_deleted">Approver deleted?</label><select class="select optional" name="search[approver][is_deleted]" id="search_is_deleted_approver"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>
        <div class="input select optional search_is_banned"><label class="select optional" for="search_is_banned">Approver banned?</label><select class="select optional" name="search[approver][is_banned]" id="search_is_banned_approver"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>
        `
        document.querySelector("#search_level").value=(new URLSearchParams(window.location.search)).get('search[user][level]');
        document.querySelector("#search_note_update_count").value=(new URLSearchParams(window.location.search)).get('search[user][note_update_count]');
        document.querySelector("#search_post_update_count").value=(new URLSearchParams(window.location.search)).get('search[user][post_update_count]');
        document.querySelector("#search_upload_count").value=(new URLSearchParams(window.location.search)).get('search[user][post_upload_count]');
        document.querySelector("#search_is_deleted").value=(new URLSearchParams(window.location.search)).get('search[user][is_deleted]');
        document.querySelector("#search_is_banned").value=(new URLSearchParams(window.location.search)).get('search[user][is_banned]');

        document.querySelector("#search_level_approver").value=(new URLSearchParams(window.location.search)).get('search[approver][level]');
        document.querySelector("#search_note_update_count_approver").value=(new URLSearchParams(window.location.search)).get('search[approver][note_update_count]');
        document.querySelector("#search_post_update_count_approver").value=(new URLSearchParams(window.location.search)).get('search[approver][post_update_count]');
        document.querySelector("#search_upload_count_approver").value=(new URLSearchParams(window.location.search)).get('search[approver][post_upload_count]');
        document.querySelector("#search_is_deleted_approver").value=(new URLSearchParams(window.location.search)).get('search[approver][is_deleted]');
        document.querySelector("#search_is_banned_approver").value=(new URLSearchParams(window.location.search)).get('search[approver][is_banned]');
    }

    if(/https:.*\/(favorite_groups).*/.test(window.location.href)) {
        tmp_collection=document.querySelectorAll("#a-index form div");
        tmp_collection[tmp_collection.length-1].outerHTML+=`

        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User upload count</label><input class="string optional" type="text" name="search[creator][post_upload_count]" id="search_upload_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User note update count</label><input class="string optional" type="text" name="search[creator][note_update_count]" id="search_note_update_count"></div>
        <div class="input string optional search_reason_matches"><label class="string optional" for="search_reason_matches">User post update count</label><input class="string optional" type="text" name="search[creator][post_update_count]" id="search_post_update_count"></div>

            <div class="input select optional search_level"><label class="select optional" for="search_level">Level</label><select class="select optional" name="search[creator][level]" id="search_level"><option value="" label=" "></option>
${html_user_level_options}</select></div>

        <div class="input select optional search_is_deleted"><label class="select optional" for="search_is_deleted">Deleted?</label><select class="select optional" name="search[creator][is_deleted]" id="search_is_deleted"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>
        <div class="input select optional search_is_banned"><label class="select optional" for="search_is_banned">Banned?</label><select class="select optional" name="search[creator][is_banned]" id="search_is_banned"><option value="" label=" "></option>
<option value="true">Yes</option>
<option value="false">No</option></select></div>
        `
        document.querySelector("#search_level").value=(new URLSearchParams(window.location.search)).get('search[creator][level]');
        document.querySelector("#search_note_update_count").value=(new URLSearchParams(window.location.search)).get('search[creator][note_update_count]');
        document.querySelector("#search_post_update_count").value=(new URLSearchParams(window.location.search)).get('search[creator][post_update_count]');
        document.querySelector("#search_upload_count").value=(new URLSearchParams(window.location.search)).get('search[creator][post_upload_count]');
        document.querySelector("#search_is_deleted").value=(new URLSearchParams(window.location.search)).get('search[creator][is_deleted]');
        document.querySelector("#search_is_banned").value=(new URLSearchParams(window.location.search)).get('search[creator][is_banned]');
    }

    if(/https:.*\/(posts)($|(\?.*))/.test(window.location.href)) {
        //document.querySelector("#post-sections").innerHTML+=`<li style="cursor:pointer"><a onclick='myFunctionsYYEF.show1UpStr()'>Show 1-up str</a></li>`
        if(document.querySelector("#view-artist-link")) {
            document.querySelector("#view-artist-link").outerHTML+=`&nbsp&nbsp&nbsp&nbsp<a href="/wiki_pages/${document.querySelector("#excerpt .heading").innerHTML.replaceAll(" ","_")}">Artist wiki page</a>`
        }
    }

    if(/https:\/\/.*\/dmails\/new.*/.test(window.location.href)) {
        var pre_written_responses=[
            {
                 name:"New user uploading and unaware of rules",
                 title:"Please read the upload rules",
                 message:
`Hello, I see that you’re new to uploading.
Please read [[help:upload rules|The Upload Rules]] before uploading more posts.
`
            },
            {
                 name:"User is vandalizing",
                 title:"You are committing vandalisim",
                 message:
`Hello, I have reasons to suspect you of committing vandalism.
Please do not intentionally add or remove stuff where it’s not appropriate.

Referring to:

[b]Any kind of vandalism is a violation of [[help:community_rules|the community rules]].[/b]
[u][b]Please stop doing that.[/b][/u]

[expand=Examples of vandalism]
Examples of such behavior would be:
[table]
[tr]
[td]tag vandalism[/td]
[td]Intentionally adding or removing correct tags from a post[/td]
[/tr]
[tr]
[td]wiki vandalism[/td]
[td]Intentionally writing stuff on wiki pages that isn’t appropriate for it[/td]
[/tr]
[tr]
[td]artist page vandalism[/td]
[td]Intentionally removing/adding links that aren’t appropriate for that artist[/td]
[/tr]
[/table]
[/expand]
`
            },
            {
                 name:"User unresponsive to DMails",
                 title:"Unresponsive to DMails",
                 message:
`Hello, you are being unresponsive to my DMails.
Please take the critic and don’t be ignorant about it.
Especially if it’s because of you breaking the rules or me telling you how not to do things.
`
            },
            {
                 name:"User is incorrectly rating posts",
                 title:"Incorrect rating",
                 message:
`Hello, you’re not rating your posts correctly.
Please take a look at asset #22830992 which gives you great examples of post ratings.
Please do also read the wiki page [[howto:rate]] which gives you a more in depth explanation of post ratings.
`
            },
            {
                 name:"User not adding enough tags",
                 title:"Improper tagging",
                 message:
`Hello, you’re not tagging your posts properly.
[b][u]Proper tagging is not optional.[/u][/b]
You need to tag everything that you see and [u]as much as you can.[/u]

[b]Please take a look at [[howto:tag]] or [[howto:tag checklist]] which shows you the level of importance of many commonly used tags.[/b]
`
            },
            {
                 name:"User is doing multiple stuff wrong",
                 title:"You're not doing some stuff right",
                 message:
`Hello, you're not contributing correctly.
I'll point some stuff out:
* `
            },
            {
                 name:"Self-uploader uploading their art regardless of quality",
                 title:"Self-uploading",
                 message:
`Hello, [[self-upload|uploading your art]] is not against [[help:upload rules|the upload rules]], however the quality of the art needs to follow Danbooru’s standards like any other post here.

[[Danbooru_(site)|Danbooru]] is not made for artists. [[Danbooru_(site)|Danbooru]]’s primary purpose is archiving high-quality artwork.
If you want to upload your own artwork, please go to [[DeviantART]], [[Pixiv]], [[Twitter]], [[Reddit]] or any other website that allows artists to upload their works.

Please take a look at the wiki for more information:
* [[help:upload]]
* [[help:upload rules|upload rules]]
`
            },
            {
                 name:"User is a minor",
                 title:"Please leave this site",
                 message:
`Hello, please do not use Danbooru in any way if you’re under 18 years old.
This website contains explicit imagery and is not suited for such people.
Your account will simply be banned.
`
            },
            {
                 name:"Blatant mistagging",
                 title:"Blatant mistagging",
                 message:
`Hello, please do not put blatantly wrong tags where they do not belong.
Please take a look at [[howto:tag]].
`
            },
            {
                 name:"Comment spamming",
                 title:"Comment spamming",
                 message:
`Hello, please do not write unnecessary stuff in the comments.
This includes “lol”, “wow”, anything too simple or anything that doesn’t add much value to Danbooru.
Stuff like this will either be seen as spam or trolling.

Please check [[help:comments]] and [[help:community_rules]] for more information.
`
            },
            {
                 name:"Comment hostility",
                 title:"Comment hostility",
                 message:
`Hello, please do not write hostile and demeaning comments.
Comments like that are very likely to be deleted and attract negative feedback.

Please check [[help:comments]] and [[help:community_rules]] for more information.

Another thing to note, comments will bump posts and make them appear on top of the [/comments](/comments) page, you can prevent this by ticking "No Bump" while writing your comments.
Bumping posts with comments could be bad if your comment isn’t really significant to the post. Users check [/comments](/comments) for questions about tagging or anything related to the booru’s contribution.
Anything else could get you negative attention, unless you write something useful.
`
            },
            {
                 name:"User uploading AI art",
                 title:"You're uploading AI generated imagery",
                 message:
`Hello, please do not upload fully [[ai-generated]] imagery.
It is against the [[help:upload_rules|upload rules]] to upload [[ai-generated]] images to Danbooru.

There is a “sister”-site to Danbooru called [https://aibooru.online/](AIBooru), which was created only for [[ai-generated]] images and artwork, so please upload [[ai-generated|AI]] images there instead.
There are many people who post [[self-upload]]s there, so if you’re an AI creator yourself you can get decent feedback on your generations and improve them.
`
            },
            {
                 name:"User uploading duplicates",
                 title:"You're uploading duplicates",
                 message:
`Hello, please do not upload [[duplicate|duplicates]].
`
            },
            {
                 name:"User uploading real life images",
                 title:"You're uploading real life images",
                 message:
`Hello, please do not upload [[photo_(medium)|real life photographs]] that have nothing to do with anime, manga or video games.
Stuff like that is blatantly [[off-topic]], therefore against the [[help:upload rules|upload rules]].
`
            },
            {
                 name:"User uploading off-topic content",
                 title:"You're uploading off-topic content",
                 message:
`Hello, you’re uploading [[off-topic]] content which is against the [[help:upload rules|upload rules]].

[u][b]Please check the following wiki pages[/b][/u]:
* [u][b][[help:upload]][/b][/u]
* [[help:upload rules|upload rules]]
* [[off-topic]]
`
            },
            {
                 name:"User uploading low quality content",
                 title:"You're uploading low quality content",
                 message:
`Hello, please do not upload low quality content.

Please check the [[help:upload]] wiki page.
`
            },
            {
                 name:"User uploading blatantly low quality content",
                 title:"You're uploading blatantly low quality content",
                 message:
`Hello, please do not upload blatantly low quality content to Danbooru.

Please check the [[help:upload]] wiki page.
If you do not wish to contribute to this site, please log off now and do not cause further trouble.
`
            },
            {
                 name:"User writing bad wikis",
                 title:"You're writing bad wikis",
                 message:
`Hello, you are not making or editing wiki pages properly.
Wiki pages are supposed to be objectively provided information about a tag.

Please check [[howto:wiki]] for more information.
`
            },
            {
                 name:"User continuously trolls and behaves bad",
                 title:"You're continuously trolling and behaving badly",
                 message:
`Hello, it seems that you are repeatedly breaking the rules after the members, mods and admins told you many times not to break them.
You should leave the site for a bit and reflect upon yourself.
Trolling and behaving like this is unhealthy.
Come back once you actually want to contribute to the site,
unless your account has already been permanently banned.
`
            },
            {
                 name:"User is Japanese and contributing",
                 title:"こんにちは、ユーザ",
                 message:
`こんにちは、ユーザ。
私は日本人じゃない、でも日本語をちょっとちょっと分かる。
danbooruは英語ですから日本人がこのサイトの分かることは難しいです。
danbooruは多い大切な規約がいます。すべての規約は英語に書いています。
良く組織的な画像掲示板ですからdanbooruの規約の分かる事は絶対大切です。
英語に上手分かりませんならば、danbooruを恐らく使えいませないで。
進めなら、おそらくdanbooruの規約を誤って破る。
あなたは何も悪いものをしにませんでした。善意がいました事が分かる。
寄与してくれてありがとうございます。
`
            },
            {
                 name:"User is a Japanese artist",
                 title:"こんにちは、絵画家さん",
                 message:
`こんにちは、絵画家さん。
Danbooruの[[help:community_rules|公共規約]]を尊敬してください。
他のユーザを苦しめることや荒らすことをしてないでくさあい。
Danbooruは何でもAIのサービスやAI学習に関係していない。
Danbooruのユーザは日本の絵が好きですから絵画家さんの絵をアーカイブする。
Danbooruは絵画家さんのクレジットと掲載する。
読んでくれてありがとうございます。
`
            },
            {
                 name:"User is Japanese and violating the rules",
                 title:"こんにちは、絵画家さん",
                 message:
`こんにちは、ユーザ。
Danbooruの[[help:community_rules|公共規約]]を尊敬してください。
そしたら、他のユーザを苦しめることや荒らすことをしてないでください。
Danbooruは英語ですから日本人がこのサイトの分かることは難しいです。
danbooruは多い大切な規約がいます。すべての規約は英語に書いています。
`
            },
        ]

        document.querySelector("div.dmail_title").innerHTML+=`<br><input value="Quick response" id='temp-to-remove' onclick='myFunctionsYYEF.showResponseButtons()' type="button" style='margin-top:5px;'>`
        myFunctionsYYEF.showResponseButtons = function() {
            document.querySelector("#temp-to-remove").remove();
            pre_written_responses.forEach(response => {
                var my_html_elem_tmp = myFunctionsYYEF.htmlToNode(`
               <input value="${response.name}" onclick='document.querySelector(".dmail_title input").value=\`${response.title.replaceAll("'","’")}\`; document.querySelector("textarea.dtext").value=\`${response.message.replaceAll("'","’")}\`' type="button" style='margin-top:5px;'>
             `.trim());
                document.querySelector("div.dmail_title").appendChild(my_html_elem_tmp)
                my_html_elem_tmp = myFunctionsYYEF.htmlToNode('<br>');
                document.querySelector("div.dmail_title").appendChild(my_html_elem_tmp);
            })
        }
    }
    else if(/\/dmails/.test(window.location.href)) {
        if(document.querySelector(`form[action="/dmails"] input[type="submit"]`))
        document.querySelector(`form[action="/dmails"] input[type="submit"]`).outerHTML+="<br><br><p><a id='dmailsshowuploadbutton' href='#' onclick='myFunctionsYYEF.dmailsShowUploads()'>Show uploads since dmail sending</a></p>";

    }

    // show total delete ratio on profile page
    if(/https:\/\/.*\/profile$/.test(window.location.href) || /https:\/\/.*\/users\/\d+$/.test(window.location.href)) {
        var danbooru_username=document.querySelector("#c-users a.user").innerHTML.replaceAll(' ','_')
        var deleted_upload_count=parseInt(Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Deleted Uploads').parentElement.querySelector("td a").innerHTML);
        var   total_upload_count=parseInt(Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Uploads').parentElement.querySelector("td a").innerHTML)
        var deletion_ratio=0;
        if (!(deleted_upload_count==0 || total_upload_count==0)) deletion_ratio=Math.round((deleted_upload_count / total_upload_count)*10000)/100;
        Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Deleted Uploads').parentElement.outerHTML+=
            `
            <tr>
            <th>Deletion percentage</th>
            <td>
            ${deletion_ratio}%
            </td>
            </tr>
            `;

        // fetch more info about a user (with a button)
        document.querySelector("#a-show h1 a").outerHTML+=`&nbsp<a class="dtext-link" style="font-size:16px; font-style: italic; cursor:pointer" onclick="myFunctionsYYEF.showMoreUserInfo();">Fetch more info</a>`

        myFunctionsYYEF.showMoreUserInfo = function() {
            document.querySelector("#a-show h1 a.dtext-link").remove()

            // posts per day statistic
            var dateEnd = new Date(new Date().setDate(new Date().getDate() - 2));
            var dateStart = new Date(new Date().setDate(new Date().getDate() - 32));
            var days_counted=0;
            var posts_per_day=0;
            console.log(`${dateStart.toISOString().slice(0, 10)}`);
            fetch(`/reports/posts.json?commit=Search&id=posts&search%5Bfrom%5D=${dateStart.toISOString().slice(0, 10)}&search%5Bperiod%5D=day&search%5Btags%5D=user%3A${danbooru_username}&search%5Bto%5D=${dateEnd.toISOString().slice(0, 10)}`)
                .then(response => response.json())
                .then(json => {
                json.forEach(item => {
                    posts_per_day+=item.posts;
                })
                posts_per_day=Math.round((posts_per_day/json.length)*100)/100
                console.log(posts_per_day)
                Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Uploads').parentElement.outerHTML+=
                    `
            <tr>
            <th>Uploads per day<br>(last 30 days)</th>
            <td>
            <a href="/reports/posts?commit=Search&id=posts&search%5Bperiod%5D=day&search%5Btags%5D=user%3A${danbooru_username}">${posts_per_day}</a>
            </td>
            </tr>
            `;

            })

            // deletion ratio from last 60days
            fetch(`/counts/posts.json?tags=user:${danbooru_username} age:<=60d`)
                .then(response => response.json())
                .then(json => {

                fetch(`/counts/posts.json?tags=user:${danbooru_username} age:<=60d status:deleted`)
                    .then(response => response.json())
                    .then(json2 => {
                    var deletion_ratio_60days=0;
                    if(json.counts.posts!=0)
                        deletion_ratio_60days=Math.round((json2.counts.posts/json.counts.posts)*10000) / 100
                    var total_upload_count_60days=json.counts.posts;
                    Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Deletion percentage').parentElement.outerHTML+=
                        `
            <tr>
            <th>Deletion percentage <br>(last 60 days)</th>
            <td>
            <a href="/posts?tags=user:${danbooru_username} status:deleted age:<=60d">${deletion_ratio_60days}% (${json2.counts.posts})</a> of <a href="/posts?tags=user:${danbooru_username} age:<=60d">${total_upload_count_60days} posts</a>
            </td>
            </tr>
            `;
                })

            })

            // show flagged post count
            var my_html_elem_flgps=Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Deletion percentage');
            if(my_html_elem_flgps===null) my_html_elem_flgps=Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Deleted Uploads')
            my_html_elem_flgps=my_html_elem_flgps.parentElement;

            fetch(`/counts/posts.json?tags=user%3A${danbooru_username}+status%3Aflagged`)
                .then(response => response.json())
                .then(json => {
                my_html_elem_flgps.outerHTML+=
                    `
            <tr>
            <th>Flagged Posts</th>
            <td>
            <a href="/posts?tags=status%3Aflagged+user%3A${danbooru_username}">${json.counts.posts}</a>
            </td>
            </tr>
            `;

                fetch(`/counts/posts.json?tags=user%3A${danbooru_username}+status%3Apending`)
                    .then(response => response.json())
                    .then(json => {
                    my_html_elem_flgps=Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Flagged Posts');
                    if(my_html_elem_flgps===null) my_html_elem_flgps=Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Deleted Uploads')
                    my_html_elem_flgps=my_html_elem_flgps.parentElement;
                    my_html_elem_flgps.outerHTML+=
                        `
            <tr>
            <th>Pending Posts</th>
            <td>
            <a href="/posts?tags=status%3Apending+user%3A${danbooru_username}">${json.counts.posts}</a>
            </td>
            </tr>
            `;

                    fetch(`/counts/posts.json?tags=is%3Aappealed+appealer%3A${danbooru_username}`)
                        .then(response => response.json())
                        .then(json => {
                        my_html_elem_flgps=Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Pending Posts');
                        if(my_html_elem_flgps===null) my_html_elem_flgps=Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Deleted Uploads')
                        my_html_elem_flgps=my_html_elem_flgps.parentElement;
                        my_html_elem_flgps.outerHTML+=
                            `
            <tr>
            <th>Appealed Posts</th>
            <td>
            <a href="/posts?tags=is%3Aappealed+appealer%3A${danbooru_username}">${json.counts.posts}</a>
            </td>
            </tr>
            `;


                    })


                })

            })

            // redirect saved search links to post search query links
            fetch('/saved_searches.json')
                .then(response => response.json())
                .then(json => {
                json.forEach(item => {
                    var my_html_elem_temp1=document.querySelector(`a[href='/posts?tags=search%3A${encodeURIComponent(item.labels[0]).replaceAll("(","%28").replaceAll(")","%29")}']`)
                    console.log(my_html_elem_temp1)
                    if(my_html_elem_temp1) my_html_elem_temp1.href=`/posts?tags=${item.query}`
                })
            })

            // sockpuppet stats
            var danbooru_userid=parseInt(document.querySelector("#a-show h1 a").href.split("/").lastItem)
            var danbooru_sockpuppet_master=danbooru_sock_account_db.find(x => x.ids.includes(danbooru_userid))
            if(danbooru_sockpuppet_master) danbooru_sockpuppet_master.usernames.push(btoa(danbooru_username))
            console.log(danbooru_sockpuppet_master)
            var search_query_for_relatedtags=`user:${danbooru_username} -favgroup:36483 -(is:child variant_set)`
            console.log(danbooru_sockpuppet_master)
            var danbooru_socks_html=""

            try {

            for (let i = 0; i < danbooru_sockpuppet_master.ids.length; i++) {
                danbooru_socks_html+=`<a class="user" data-user-name="${danbooru_sockpuppet_master.usernames[i]}" href="/users/${danbooru_sockpuppet_master.ids[i]}" aria-expanded="false">${atob(danbooru_sockpuppet_master.usernames[i])}</a>, `;
            }

            }
            catch {}

            if(danbooru_sockpuppet_master) {

                Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Level').parentElement.outerHTML+=`

                <tr>
        <th>Sockpuppets</th>
        <td>
          <a rel="nofollow" href="/users?&search%5Bid%5D=${danbooru_sockpuppet_master.ids.join(",")}">${danbooru_sockpuppet_master.ids.length}</a>

        </td>
      </tr>
      <tr>
        <th>Sockpuppet accounts</th>
        <td>
          ${danbooru_socks_html}

        </td>
      </tr>

                `

                var search_all_uploads_query=""
                danbooru_sock_account_db.find(x => x.ids.includes(danbooru_userid)).usernames.forEach(item=>{
                    search_all_uploads_query=`${search_all_uploads_query}user:${atob(item)} or `
                })
                search_all_uploads_query=`(${search_all_uploads_query.substr(0,search_all_uploads_query.length-4)})`
                search_query_for_relatedtags=search_query_for_relatedtags.replace(`user:${danbooru_username}`,`(${search_all_uploads_query})`)
                console.log(search_all_uploads_query)
                fetch(`/counts/posts.json?tags=${search_all_uploads_query}`)
                    .then(response=>response.json())
                    .then(json=> {

                    fetch(`/counts/posts.json?tags=${search_query_for_relatedtags}`)
                        .then(response=>response.json())
                        .then(json2=> {

                        Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Uploads').parentElement.outerHTML+=`
                        <tr>
        <th>Total Uploads</th>
        <td>
          <a rel="nofollow" href="/posts?tags=${search_all_uploads_query}">${json.counts.posts}</a>

        </td>
      </tr>`

                        Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Uploads').parentElement.outerHTML+=`
                        <tr>
        <th>Total Uploads (w\o 1-ups, variant sets)</th>
        <td>
          <a rel="nofollow" href="/posts?tags=${search_query_for_relatedtags}">${json2.counts.posts}</a>

        </td>
      </tr>`

                    })

                })

                fetch(`/counts/posts.json?tags=(${search_all_uploads_query}) status:deleted`)
                    .then(response=>response.json())
                    .then(json=> {
                    Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Deleted Uploads').parentElement.outerHTML+=`
                        <tr>
        <th>Total Deleted Uploads</th>
        <td>
          <a rel="nofollow" href="/posts?tags=(${search_all_uploads_query}) status:deleted">${json.counts.posts}</a>

        </td>
      </tr>
                        `

                })

                Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Feedback').parentElement.querySelector("a").href=`/user_feedbacks?search[user_id]=${danbooru_sockpuppet_master.ids.join(",")}`

            } else {
                fetch(`/counts/posts.json?tags=${search_query_for_relatedtags}`)
                    .then(response=>response.json())
                    .then(json2 => {

                    Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Uploads').parentElement.outerHTML+=`
                        <tr>
        <th>Total Uploads (w\o 1-ups, variant sets)</th>
        <td>
          <a rel="nofollow" href="/posts?tags=${search_query_for_relatedtags}">${json2.counts.posts}</a>

        </td>
      </tr>`

                })
            }

            setTimeout(() => {

                // rating percentages
                var search_query_for_relatedtags=`user:${danbooru_username} -favgroup:36483 -(is:child variant_set)`
                var ratings_calc_total_upload_count=total_upload_count;

                try {
                    console.log(search_all_uploads_query)
                    if(danbooru_sockpuppet_master && search_all_uploads_query.length<200) {
                        ratings_calc_total_upload_count=parseInt(Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Total Uploads (wo 1-ups, variant sets)').parentElement.querySelector("td a").innerHTML)
                        search_query_for_relatedtags=search_query_for_relatedtags.replace(`user:${danbooru_username}`,`(${search_all_uploads_query})`)
                        console.log(ratings_calc_total_upload_count)
                    }
                }
                catch {}

                var html_elem_tmp=Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Favorites').parentElement
                if(html_elem_tmp) {
                    fetch(`/counts/posts.json?tags=rating:g+(${search_query_for_relatedtags})`)
                        .then(response => response.json())
                        .then(counts_general => {

                        fetch(`/counts/posts.json?tags=rating:s+(${search_query_for_relatedtags})`)
                            .then(response => response.json())
                            .then(counts_sensitive => {

                            fetch(`/counts/posts.json?tags=rating:q+(${search_query_for_relatedtags})`)
                                .then(response => response.json())
                                .then(counts_questionable => {

                                fetch(`/counts/posts.json?tags=rating:e+(${search_query_for_relatedtags})`)
                                    .then(response => response.json())
                                    .then(counts_explicit => {
                                    var pperc_g=0, pperc_s=0, pperc_q=0, pperc_e=0
                                    if(total_upload_count>0) {
                                        pperc_g=Math.round((counts_general.counts.posts / ratings_calc_total_upload_count) * 10000)/100;
                                        pperc_s=Math.round((counts_sensitive.counts.posts / ratings_calc_total_upload_count) * 10000)/100;
                                        pperc_q=Math.round((counts_questionable.counts.posts / ratings_calc_total_upload_count) * 10000)/100;
                                        pperc_e=Math.round((counts_explicit.counts.posts / ratings_calc_total_upload_count) * 10000)/100;
                                    }
                                    html_elem_tmp.outerHTML+=
                                        `<tr>
            <th>Rating percentages</th>
            <td>
               <span><a href='/posts?tags=rating%3Ag+(${search_query_for_relatedtags})'>General (${pperc_g}%)</a>,
               <a href='/posts?tags=rating%3As+(${search_query_for_relatedtags})'>Sensitive (${pperc_s}%)</a>,
               <a href='/posts?tags=rating%3Aq+(${search_query_for_relatedtags})'>Questionable (${pperc_q}%)</a>,
               <a href='/posts?tags=rating%3Ae+(${search_query_for_relatedtags})'>Explicit (${pperc_e}%)</a> </span>
            </td>
            </tr>`
                                })

                            })

                        })

                    })
                }

            }, "500");

            // related tags
            // danbooru_username=document.querySelector("#c-users a.user").innerHTML.replaceAll(' ','_')

            if(total_upload_count>0)
                search_query_for_relatedtags=`user:${danbooru_username} -favgroup:36483 -(is:child variant_set)`
                if(danbooru_sockpuppet_master && search_all_uploads_query.length<200) {
                    search_query_for_relatedtags=search_query_for_relatedtags.replace(`user:${danbooru_username}`,`(${search_all_uploads_query})`)
                }
                fetch(`/related_tag.json?commit=Search&search%5Bcategory%5D=General&search%5Border%5D=Frequency&search%5Bquery%5D=${search_query_for_relatedtags}`)
                    .then(response => response.json())
                    .then(reltags_general => {

                    fetch(`/related_tag.json?commit=Search&search%5Bcategory%5D=Copyright&search%5Border%5D=Frequency&search%5Bquery%5D=${search_query_for_relatedtags}`)
                        .then(response => response.json())
                        .then(reltags_copyrights => {

                        fetch(`/related_tag.json?commit=Search&search%5Bcategory%5D=Character&search%5Border%5D=Frequency&search%5Bquery%5D=${search_query_for_relatedtags}`)
                            .then(response => response.json())
                            .then(reltags_characters => {

                            fetch(`/related_tag.json?commit=Search&search%5Bcategory%5D=Artist&search%5Border%5D=Frequency&search%5Bquery%5D=${search_query_for_relatedtags}`)
                                .then(response => response.json())
                                .then(reltags_artists => {

                                fetch(`/related_tag.json?commit=Search&search%5Bcategory%5D=Meta&search%5Border%5D=Frequency&search%5Bquery%5D=${search_query_for_relatedtags}`)
                                    .then(response => response.json())
                                    .then(reltags_meta => {
                                    console.log(reltags_meta)

                                    var html_related_tags_str="<span>"
                                    var excluded_general_tags="shirt teeth 2boys 3boys long_sleeves closed_mouth open_mouth pants"
                                    var amount_of_tags=20

                                    excluded_general_tags.split(" ").forEach(taggy =>{
                                        reltags_general.related_tags.splice( reltags_general.related_tags.indexOf(reltags_general.related_tags.find((item) => item.tag.name==taggy)),1 )
                                    })

                                    reltags_general.related_tags.slice(0,amount_of_tags*2).forEach(item => {
                                        html_related_tags_str+=`<a class="tag-type-${item.tag.category}" href="/posts?tags=${item.tag.name} (${search_query_for_relatedtags})">${item.tag.name}</a> (${Math.round(item.frequency*10000)/100}%), `
                                    })
                                    html_related_tags_str+="<br>"

                                    reltags_artists.related_tags.slice(0,amount_of_tags).forEach(item => {
                                        html_related_tags_str+=`<a class="tag-type-${item.tag.category}" href="/posts?tags=${item.tag.name} (${search_query_for_relatedtags})">${item.tag.name}</a> (${Math.round(item.frequency*10000)/100}%), `
                                    })
                                    html_related_tags_str+="<br>"

                                    reltags_copyrights.related_tags.slice(0,amount_of_tags).forEach(item => {
                                        html_related_tags_str+=`<a class="tag-type-${item.tag.category}" href="/posts?tags=${item.tag.name} (${search_query_for_relatedtags})">${item.tag.name}</a> (${Math.round(item.frequency*10000)/100}%), `
                                    })
                                    html_related_tags_str+="<br>"

                                    reltags_characters.related_tags.slice(0,amount_of_tags).forEach(item => {
                                        html_related_tags_str+=`<a class="tag-type-${item.tag.category}" href="/posts?tags=${item.tag.name} (${search_query_for_relatedtags})">${item.tag.name}</a> (${Math.round(item.frequency*10000)/100}%), `
                                    })
                                    html_related_tags_str+="<br>"

                                    reltags_meta.related_tags.slice(0,amount_of_tags).forEach(item => {
                                        html_related_tags_str+=`<a class="tag-type-${item.tag.category}" href="/posts?tags=${item.tag.name} (${search_query_for_relatedtags})">${item.tag.name}</a> (${Math.round(item.frequency*10000)/100}%), `
                                    })
                                    html_related_tags_str+="<br>"

                                    html_related_tags_str+="</span>"

                                    console.log(html_related_tags_str)
                                    var tb_fav_row=Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Favorites').parentElement
                                    tb_fav_row.outerHTML=
                                        `
            <tr>
            <th>Related tags</th>
            <td>
            ${html_related_tags_str}
            </td>
            </tr>
            `+tb_fav_row.outerHTML;

                                })



                            })

                        })

                    })

                })

        };



    // favorite groups sort alphabetically by default
        var myelem=Array.from(document.querySelectorAll('th')).find(item => item.innerHTML == 'Favorite Groups').parentElement.querySelector("td a")
        myelem.href+="&limit=200&search%5Border%5D=name";

    }

    if(window.location.href.includes("/reports/posts")) {

        myFunctionsYYEF.users_arr=[
            {
                name:"yooyooko",
                aliases:['user 998846','SpikySquid','user 1160833','user 1147878','user 1153426']
            },
            {
                name:"JapaneseBonusTrack",
                aliases:['JapaneseBonusTrack','baphometbimbo']
            },
            {
                name:"7annete997",
                aliases:["peng weng","gd783hhh","sextuspompeius","chirurug","bunniapa","pinkukirby","harang08169141","italobrothers","zenkun","bonnie_yun","mini_n","davidsong17","bexercube","PerfectTube12","sunproject","bigbigworld","piantapng","kafkaboom","peng_weng","uts75e","ry8iy","Ben_Bigger","ZhuYuan","kuroro2000","lintertea","koyuuuuuuuuuuu","7e5gjo","wert4ey6","cherrutus","targetstore","cherrysakura3","cherryblossomfestival","Shugao","majinkz","NoticeNe","MintBlush","pluckysaxophone","GlittersofMoonlight","DontStopMeNow","WatermelonSugar","ieneko","gnmskei","CantTouchThis","Kryuger","Koleda","Belobog","missioncomplete","DontWaitUp","404error","ninelivesst7","scenicbabe15","scenicbabe1","scenicbabe","saadiya74","nebulanectar","h5gg95","bloodyhalo","date_me","glamgoddesss","LuxeBeauty","lemix","2mk","shihoran","8bxo","outdoorsy","LuxuryRealtor","2soliddk","zenmood","pinkpage","beautystylish","glittergirl","cupcakegirl","pinkdaisy","dgustarshadow","loves2chill","livlovely","likelyregular","machosail","EcoFriendlyFashionista","FashionFinder","peanutjam","freezingslip","NameBeyond","te70r5","Wallaru","chxrry","EpicCoaster","spriingtiimes","wing_chun","krokotopia","oldcob","Zafaria","polaris101","Dragonspyre","marleybone","Monquista","kloves2chill","pirate101","backyardigans","yourfavoriteneighbor","eggshen","ow12714","simsimhea0","uenio","YMCA","chinahouse","LamazeP","panera","LuxuryLeathers","TheRealName","miyutheobjects71","ArtistOfLight","NameSecurity","starbucks","alchemyworks","ModernMarketer","lovesDance","Makegirls","freerelaxingmovies","BlissfulBlend","LizDoesBiz","JoGlows","NYCBoutiqueStyle","Bagdana","sludlclass","slmfe0171","microsoft43653best","Shigemichi","Kasumizawa","Naoki_dake","nyahallo1","Nyahallo","ALaCarta","Raqio","Gnosia","Jimmori","sweetiepie","WorldofLongplays","MacdonaldsMarket","Lizally","ArisuArchive","pinklover","SexPistolsFan","iced_tea","Goanimate","angelsnowflakes","ThunderPanzer","Mr.Dub","sudako","MDeluxefish","Mariofan98","EATSEGA","J4DE","Jimoori","Makisea","CheLA77","misyune","wavesonbeautiful","adrusdossal","cyanclosely","Milkywaywishes","3dseason","beautifulfool","blue_ephemeris","jaat","life_hacker","rey9856klgcudsh3t5im0bh4","Imnosockpuppetimnew","work_of_holly","synesthesia34r","GelatoBeach","barklocal","faithfulperson","growlingmussles","lionpension","samamohamedd","mfesl","coral_soul","seli-chan","swingroof","KidsFingerFamilySongs","waltyfierce","Party_size","queen_of_kings","pepperpeach","heartkiller","HIRED","freerelaxing","mfesl3590","angelicheart","witchgirl","bunnypassion","microsoft436539","Dr_Sunflower","easyrose","qixia66","SuperAdvance","David112","spinixster","Ken553","nevar-kun","MISOART","Geratown","bafflegab","deviagapa","pamboura","GameplayUploaded","googoo888","Bgh73","bad_captain","zing_out39","magneticwoman","shydoll","menotbug","akito_scl","toothnorth","couchking","Humdrum","zeiphyr","shinelimes","eric_fe","univerxse","lessonpower","Winkchi","Rivervixen","leanlace","wineandwhine","squirrel_nuts","Surio","moanwaggish","choughvest","NCZeus","hazzle_dazzle","springhouse","flame2frost","overdoor","amlerisa","brotheladorer","beloved-angle","pinexapple","FM2-3","pie_sweetness","packattack04082","butterflykiss","iamwellandgood","StarryEyes","daily_punch","delaps3465","Chibiterasuchan","monochromebluesky","born-confused","S3RLDJ","WiiFit","JuicyFriut","ScratchKitchen","Gamestop","rtybryr6","sparksofcourage","sparksofhopebritish","eirigriyv","klutv4igg","mixmilkshakes","crazy_anyone","wiki.tockdom","5yv46464","Gifjlgdgx","Gxuggx","BlueAngel92","Igckgxkg","ShinigamiSaori","Igcih45","Tcofcgj345","TataFan","rukayex","IchigoFan","sophia3uq448544","WhatGoesInSpace","crazycars","Savingface","taillpsycho","Megamicrogames","Ironstomach","Ulfshsfkguslhflsgjlsuos","Warioworld","arkngthsfan","ANiFLAIs","lightningbeerlockcat","goodkarma","BadKarma","FrontlinePlane","bounceback","haisley5howard","crimsonerror","Nowimmad","Happyfan","readingpro","Seaturtlefishlobster","Retirementisbest","Walmartshopper","BHCgu3st","IndianaBeach","538653hxgjdt","Utspfulsgiszyddiretuuyf","Diamondbest","babybutterflyissafe","BearTale","turtlemecha-ultra","Ryleighudjf","Kangaroozoo","Cozybhtton","myuniversebts","tomatofocused","Kiss_my_axe","Beep-0KingdomBattle","welkombijHEMA","TV5Monde","steigenberger","MadameMademoiselle","bonjourparis","bigbreak","Coastbycoast","californiagurls","hit47","hide_by_feelings","theseafiles","Yormas","Ursprunglichrein","GutenTagDeutchland","rainbow_blooms","peach_boy","ashlyn45y46","pudding456","ainsley5v645","peach_milk","Tom_Phan","Spawny","Beep-0_Kingdom_Battle","Beep-0","Beep0","Kingdombattlefan","PinaAsahina","SayaYakushi","GARNiDELiA","mousegirl","7annette997isdead","imnotaspamaccount","Lavenabest","NightcoreFan","whathurtsthemost","taffeta","bundle_of_love_solid","Everglow","imfine","marniebestgirl","Babysteps","the_spartan","Babykins","honey_pot","Elfen_Lied","I_Cheated_Myself","candy_cane","MarioStrikers","smhunt","samhunt","alwaysaugst","hebertdeasil","milky_waybest","milkyways","rainbowdressup","no_name1","rare_rips","rabbidyoshi","endlesslyyy_forrever","fairy_princess_kristy","rainbow_doll","aerolite","calirose234","abraham34","amberleigh45y5","supermagnificentextreme","Ora454","7annette997"]
            }
        ]

        myFunctionsYYEF.properly_sort_reports_table = function(users) {
            var table_work=document.querySelector("table.striped.autofit")
            users.forEach(user => {
                var total_sum=0;
                table_work.querySelectorAll('tr').forEach(row => {
                    if(row.querySelector("td")) {
                        var tabl_uname=row.querySelector('td').innerHTML.trim();
                        var tabl_data=parseInt(row.querySelectorAll('td')[1].innerHTML.trim());
                        //console.log(user.aliases.includes(tabl_uname));
                        if(user.aliases.includes(tabl_uname)) {
                            total_sum+=tabl_data;
                            row.outerHTML='';
                            //row.delete();
                        }
                    }
                })
                //console.log(user.name, total_sum)
                table_work.innerHTML+=`<tr><td>${user.name}</td><td>${total_sum}</td></tr>`;
            })

            var table_rows_array=table_work.querySelectorAll('tr:has(td)')
            for(var i=0;i<table_rows_array.length;i++) {
                var tabl1_uname=table_rows_array[i].querySelector('td').innerHTML.trim();
                var tabl1_data=parseInt(table_rows_array[i].querySelectorAll('td')[1].innerHTML.trim());
                for(var j=i;j<table_rows_array.length;j++) {
                    var tabl2_uname=table_rows_array[j].querySelector('td').innerHTML.trim();
                    var tabl2_data=parseInt(table_rows_array[j].querySelectorAll('td')[1].innerHTML.trim());
                    console.log(table_rows_array[i]==table_rows_array[j])
                    if(table_rows_array[i]!=table_rows_array[j]) {
                        if(tabl1_data<tabl2_data) {
                            var tmp=table_rows_array[i].innerHTML;
                            table_rows_array[i].innerHTML=table_rows_array[j].innerHTML;
                            table_rows_array[j].innerHTML=tmp;
                        }
                    }
                }
            }

            table_work.querySelectorAll('tr:has(td)').forEach(row => {
                console.log(row)
                var tabl_data=parseInt(row.querySelectorAll('td')[1].innerHTML.trim());
                if(tabl_data==0) row.remove();
            })
        }

        document.querySelector(`form`).outerHTML+=`
        <button class='ui-button' style="margin-top:5px;" onclick="myFunctionsYYEF.properly_sort_reports_table(myFunctionsYYEF.users_arr)">Properly sort</button>
`
    }

    if (Danbooru.PostTooltip.instance) Danbooru.PostTooltip.instance[0].destroy();
        Danbooru.PostTooltip.SHOW_DELAY = 0;
        Danbooru.PostTooltip.initialize();
})();
